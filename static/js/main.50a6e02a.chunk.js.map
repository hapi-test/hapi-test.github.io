{"version":3,"sources":["components/full_banner.png","components/trans_banner.png","components/DataRuns/InfoView/d3.parsets.js","serviceWorker.ts","service/dataService.tsx","reducer/index.tsx","helper/index.tsx","helper/preprocessor.tsx","components/DataRuns/ControlPanel/DataSelector.tsx","actions/index.tsx","constants/index.tsx","container/DataSelectorContainer.tsx","components/DataRuns/ControlPanel/index.tsx","components/DataRuns/ControlPanel/ControlPanel.tsx","container/ControlPanelContainer.tsx","components/DataRuns/InfoView/AccuracyChart.tsx","components/DataRuns/InfoView/ConsistencyChart.tsx","components/DataRuns/InfoView/ConfidenceChart.tsx","components/DataRuns/InfoView/FairnessChart.tsx","components/DataRuns/InfoView/ParallelSets.tsx","components/DataRuns/InfoView/ImageDisplay.tsx","components/DataRuns/InfoView/InfoView.tsx","components/DataRuns/InfoView/index.tsx","container/InfoViewContainer.tsx","components/DataRuns/DescriptionView/DescriptionView.tsx","components/DataRuns/DescriptionView/index.tsx","container/DescriptionViewContainer.tsx","components/DataRuns/index.tsx","components/DataRuns/DataRuns.tsx","container/DataRunsContainer.tsx","components/IntroView/IntroView.tsx","components/IntroView/index.tsx","components/App.tsx","container/AppContainer.tsx","index.tsx"],"names":["module","exports","d3","require","autoDimensions","d","length","keys","sort","cancelEvent","e","stopPropagation","preventDefault","dimensionName","name","getTotal","dimensions","categories","reduce","a","count","parsets","value_","width","height","tension0","event","dispatch","dimensions_","dimensionFormat","String","tooltip_","defaultTooltip","categoryTooltip","defaultCategoryTooltip","spacing","tension","duration","d3_rebind","target","source","method","value","apply","arguments","d3_functor","v","selection","each","data","i","nodes","total","ribbon","ribbonEnter","g","select","this","ordinal","scaleOrdinal","dragging","dimensionNames","call","tree","children","window","on","parsetsId","unhighlight","selectAll","enter","append","attr","dimension","cache","forEach","hasOwnProperty","push","compareY","path","split","node","n","p","buildTree","map","t","c","dim","k","b","domain","range","layout","dEnter","y","merge","y0","x0","x","textEnter","text","dimensionFormatName","drag","remove","updateCategories","updateRibbons","transition","translateY","tween","ribbonTweenY","filter","r","ribbonPath","dy","sortBy","exit","updateDimensions","tensionTween","interpolateNumber","type","f","direction","__direction","major","mouse","mouseEnter","unselectedRibbon","classed","highlight","showTooltip","highlightAndSelect","ribbonPathStatic","ribbonTweenX","s","j","ancestors","recurse","shift","parent","active","indexOf","parentNode","appendChild","tooltip","style","category","categoryEnter","e2","dx","textContent","w","getComputedTextLength","lo","hi","mid","getSubStringLength","substr","truncateText","rebind","_","body","html","m","pointer","ease","parsetsEase","nd","rollup","child","in","out","depth","ribbonPathString","sx","sy","sdx","tx","ty","tdx","m0","m1","join","NaN","percent","format","comma","easeElastic","root","zeroCounts","unshift","Boolean","location","hostname","match","URL","origin","URL2","axios","create","baseURL","headers","href","axiosInstance","getData","url","params","get","res","status","getExploreMetaData","getDatasetList","getRawDataURL","dataset","filename","initial_state","dataset_id","api_id","api_id_list","datasetList","user_verify","explore_meta_data","task_id","mode_id","view_mode","d3_10color","BlYlRd","concat","getLineColorMap","getLineColor","attribution","step","ColorList","getLinearColor","totalColor","divide","Math","floor","adjusted_offset","getGradientColor","startColor","endColor","colorRgb","sColor","toLowerCase","test","sColorNew","slice","sColorChange","parseInt","replace","startRGB","startR","startG","startB","endRGB","endR","endG","endB","console","log","sG","sB","R","G","B","strHex","aColor","Array","hex","Number","toString","shex","assert_key","pkg","key_list","verbose","pkg_name","flag","pkg_key_list","Object","message","assert_key_hier","key_hier_list","filtered_key_hier_list","first_level_key_list","first_key_flag","local_flag","SystemDesign","MODE_OPTIONS","get_mode_options","safe_extract_item_from_list","id","items","default_ret","selected_name","index","getContinuousVariableCategory","value_list","start","end","FULL","extract_task_list","verify_task_id","task_list","new_task_id","task_name","extract_dataset_list","results","subdata","extract_api_list","extract_value_from_data","key","dataset_name","api_name","decimal","accuracy_table","filtered_results","sorted_results","year","parseFloat","toFixed","return_obj","convert_package_to_graph","yearlist","valuelist","links","year_array","new_nodes","nodes_length","start_angle","step_angle","cos","PI","sin","color","remove_duplicate_elements","l","Set","from","filtered_data","filters","PSJson","PSData","filterData","filters_key","selected","dataInstance","confidence_style","confidence","percentage","default_color","size","strokeColor","Option","Select","DataSelector","props","onDatasetSelectorChange","bind","onAPISelectorChange","onAPIListSelectorChange","onTaskSelectorChange","onModeSelectorChange","state","selectState","initData","initExploreMetaData","data_package","datasetList_package","initDatasetList","changeTask","clearIdInfo","changeDataset","changeAPI","changeAPIList","changeMode","dataset_list","api_list","mode_options_list","disabledAPISelector","disabledDatasetSelector","disabledTaskSelector","visibleModeSelector","explore_meta_dataset_list","extract_explore_dataset_list","selected_dataset_name","all_api_id_list","select_all_state","every","element","has","generateTaskSelector","col_size","span","placeholder","undefined","onChange","disabled","generateAPISelector","mode","allowClear","dropdownRender","allSelectValue","padding","cursor","checked","margin","generateDatasetSelector","React","connect","ControlPanel","display_selector","className","DataSelectorContainer","AccuracyChart","refresh_number","renderAccuracyChart","acc_package_dict","selected_api_list","x_axis_data","y_series_data","whole_value_min","whole_value_max","enable_accuracy_chart","selected_api","acc_package","value_min","min","value_max","max","single_data_package","accuracy_chart_option","title","formatter","grid","legend","right","xAxis","boundaryGap","yAxis","series","notMerge","option","renderAccuracyChart_SinglePackage","ConsistencyChart","renderConsistencyChart","consistency_package","consistency_chart_option","animationDurationUpdate","animationEasingUpdate","visualMap","calculable","precision","inRange","symbolSize","roam","label","show","edgeSymbol","edgeSymbolSize","edgeLabel","fontSize","lineStyle","opacity","curveness","ConfidenceChart","renderConfidenceChart","confidence_package","confidence_chart_option","FairnessChart","renderFairnessChart","fairness_package_dict","enable_fairness_chart","fairness_chart_option","getStr","trigger","axisPointer","return_str","param","left","bottom","containLabel","fairness_package","ParallelCoordinates","onRibbonClick","clearFilter","onCategoryClick","renderD3","nextProps","nextState","prevProps","prevState","comparePSDimensions","PSDimensions","changeFilters","prev","current","ReversedDimMapping","chart_dimensions","chart","csv","datum","ImageDisplay","renderImageDisplay","image_width","image_height","row_image_num","old_rawdata_list","rawdata_list","total_item_num","total_page","ceil","current_page","setState","generate_image_col","config","src","alt","controls","generate_file_contents","num_per_page","start_point","end_point","sliced_data","generate_image_rows","justify","align","pageSize","onPageChange","page_num","version","InfoView","renderInfoContent","mode_list","selected_task_name","selected_api_name_list","id_list","selected_name_list","safe_extract_items_from_list","selected_mode_name","selected_api_name","consistency_raw_package","confidence_raw_package","consis_graph_pkg","conf_graph_pkg","fairness_pkg","subgroup_list","sorted_year_list","data_dict","item","subgroup","subgroup_index","local_year","local_pkg","extract_fairness_from_data","enable_fairness","generate_veritical_layout","generatePureFairnessChart","generateMetricsVisualization","ps_package","ps_name","dataset_pkg","year_list","axis_spec","series_data","reverted_pkg","temp_series_data","specific_year","selected_id","predicted_label_list","true_label","temp_data_pkg","item_list","item_key","data_pkg","new_data_pkg","Confidence_list","Confidence_range_list","data_json","total_confidence_range","year_name_dict","reversed_name_mapping","new_key","arr","sum","num","calculate_mean_of_array","get_year_name","year_name","dimension_names","extract_ps_data_from_package","image_container_width","parallel_sets_height","parallel_sets_width","ps_json","ps_package_spec","PSDimensions_old","text_list","local_item","extract_rawdata_for_imagedisplay","generateExploreVisualization","viewtitle","overflowY","Title","Typography","Paragraph","DescriptionView","Text","Link","generateHighlight","level","DataRuns","InfoViewRef","ControlPanelRef","DescriptionRef","viewname_to_ref","onResizeStop","getLayoutConfigWithName","getCurrentLayoutConfig","getViewRefWithName","layout_config","screenWidth","screenHeight","enableStatic","getWholeLayoutConfig","innerHeight","innerWidth","viewref","offsetWidth","offsetHeight","viewName","contentHeight","contentWidth","generateInfoView","InfoViewContainer","set_enable_static","document","addEventListener","curr_enableStatic","keyCode","alert","ref","DescriptionViewContainer","ControlPanelContainer","generateSequentialLayout","IntroView","img_style1","used_style","Banner","Content","Layout","Header","Sider","App","ContentRef","createRef","onResize","onMenuSelect","menu_selected_keys","updateLayoutState","contentLayout","getLayoutConfig","selectedKeys","selectedKey","file","createElement","setAttribute","click","removeChild","download","changeViewMode","generate_menu_items","Item","icon","ProfileOutlined","LineChartOutlined","SearchOutlined","DownloadOutlined","generate_menu","theme","onSelect","generate_menu_2","SubMenu","MenuFoldOutlined","enableVerticalMenu","enableHorizontalMenu","enableExpandHorizontalMenu","col_size_menu","col_size_content","viewWidth","menu_float","menu_width","float","enable","enableExpand","generate_horizontal_menu","DataRunsContainer","view_generator","Component","store","createStore","action","ReactDOM","render","AppContainer","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50a6e02a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/full_banner.3f11d53f.png\";","module.exports = __webpack_public_path__ + \"static/media/trans_banner.f7a16bfd.png\";","// Parallel Sets by Jason Davies, http://www.jasondavies.com/\r\n// Functionality based on http://eagereyes.org/parallel-sets\r\n/* global d3 */\r\n/* eslint indent: \"off\" */\r\n// d3 version 7.0\r\nconst d3 = require(\"d3\");\r\n(function() {\r\n  d3.parsets = function() {\r\n    var event = d3.dispatch(\"sortDimensions\", \"sortCategories\", \"ribbonClick\",\"categoryClick\"),\r\n        dimensions_ = autoDimensions,\r\n        dimensionFormat = String,\r\n        tooltip_ = defaultTooltip,\r\n        categoryTooltip = defaultCategoryTooltip,\r\n        value_,\r\n        spacing = 20,\r\n        width,\r\n        height,\r\n        tension = 1,\r\n        tension0,\r\n        duration = 500;\r\n\r\n    // https://stackoverflow.com/questions/47844765/d3-rebind-in-d3-v4\r\n    // Copies a variable number of methods from source to target.\r\n    d3.rebind = function(target, source) {\r\n      var i = 1, n = arguments.length, method;\r\n      while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\r\n      return target;\r\n    };\r\n\r\n    // Method is assumed to be a standard D3 getter-setter:\r\n    // If passed with no arguments, gets the value.\r\n    // If passed with arguments, sets the value and returns the target.\r\n    function d3_rebind(target, source, method) {\r\n      return function() {\r\n        var value = method.apply(source, arguments);\r\n        return value === source ? target : value;\r\n      };\r\n    }\r\n\r\n    function d3_functor(v) {\r\n      return typeof v === \"function\" ? v : function() { return v; };\r\n    }\r\n\r\n    function parsets(selection) {\r\n      selection.each(function(data, i) {\r\n        //console.log(\"parsets \", data);\r\n        var g = d3.select(this),\r\n            ordinal = d3.scaleOrdinal(),\r\n            dragging = false,\r\n            dimensionNames = dimensions_.call(this, data, i),\r\n            dimensions = [],\r\n            tree = {children: {}, count: 0},\r\n            nodes,\r\n            total,\r\n            ribbon,\r\n            ribbonEnter;\r\n\r\n        d3.select(window).on(\"mousemove.parsets.\" + ++parsetsId, unhighlight);\r\n\r\n        if (tension0 == null) tension0 = tension;\r\n        g.selectAll(\".ribbon, .ribbon-mouse\")\r\n            .data([\"ribbon\", \"ribbon-mouse\"], String)\r\n          .enter().append(\"g\")\r\n            .attr(\"class\", String);\r\n\r\n        updateDimensions();\r\n        if (tension != tension0) {\r\n          var t = d3.transition(g);\r\n          if (t.tween) t.tween(\"ribbon\", tensionTween);\r\n          else tensionTween()(1);\r\n        }\r\n\r\n        function tensionTween() {\r\n          var i = d3.interpolateNumber(tension0, tension);\r\n          return function(t) {\r\n            tension0 = i(t);\r\n            ribbon.merge(ribbonEnter).attr(\"d\", ribbonPath);\r\n          };\r\n        }\r\n\r\n        function updateDimensions() {\r\n          // Cache existing bound dimensions to preserve sort order.\r\n          var dimension = g.selectAll(\"g.dimension\"),\r\n              cache = {};\r\n          dimension.each(function(d) { cache[d.name] = d; });\r\n          dimensionNames.forEach(function(d) {\r\n            if (!cache.hasOwnProperty(d)) {\r\n              cache[d] = {name: d, categories: []};\r\n            }\r\n            dimensions.push(cache[d]);\r\n          });\r\n          dimensions.sort(compareY);\r\n          // Populate tree with existing nodes.\r\n          g.select(\".ribbon\").selectAll(\"path\")\r\n              .each(function(d) {\r\n                var path = d.path.split(\"\\0\"),\r\n                    node = tree,\r\n                    n = path.length - 1;\r\n                for (var i = 0; i < n; i++) {\r\n                  var p = path[i];\r\n                  node = node.children.hasOwnProperty(p) ? node.children[p]\r\n                      : node.children[p] = {children: {}, count: 0};\r\n                }\r\n                node.children[d.name] = d;\r\n              });\r\n          tree = buildTree(tree, data, dimensions.map(dimensionName), value_);\r\n          //console.log(\"Tree\", tree);\r\n          cache = dimensions.map(function(d) {\r\n            var t = {};\r\n            d.categories.forEach(function(c) {\r\n              t[c.name] = c;\r\n            });\r\n            return t;\r\n          });\r\n          (function categories(d, i) {\r\n            if (!d.children) return;\r\n            var dim = dimensions[i],\r\n                t = cache[i];\r\n            for (var k in d.children) {\r\n              if (!t.hasOwnProperty(k)) {\r\n                dim.categories.push(t[k] = {name: k});\r\n              }\r\n              categories(d.children[k], i + 1);\r\n            }\r\n          })(tree, 0);\r\n          dimensions.forEach((d,i)=>{\r\n            dimensions[i].categories = d.categories.sort((a,b)=>{\r\n              return a.name < b.name?-1:1;\r\n            })\r\n          })\r\n          ordinal.domain([]).range(d3.range(dimensions[0].categories.length));\r\n          nodes = layout(tree, dimensions, ordinal);\r\n          total = getTotal(dimensions);\r\n          dimensions.forEach(function(d) {\r\n            d.count = total;\r\n          });\r\n          dimension = dimension.data(dimensions, dimensionName);\r\n\r\n          var dEnter = dimension.enter().append(\"g\")\r\n              .attr(\"class\", \"dimension\")\r\n              .attr(\"transform\", function(d) { return \"translate(0,\" + d.y + \")\"; })\r\n              .on(\"mousedown.parsets\", cancelEvent);\r\n          dimension.merge(dEnter).each(function(d) {\r\n                d.y0 = d.y;\r\n                d.categories.forEach(function(d) { d.x0 = d.x; });\r\n              });\r\n          dEnter.append(\"rect\")\r\n              .attr(\"width\", width)\r\n              .attr(\"y\", -45)\r\n              .attr(\"height\", 45);\r\n          var textEnter = dEnter.append(\"text\")\r\n              .attr(\"class\", \"dimension\")\r\n              .attr(\"transform\", \"translate(0,-25)\");\r\n          textEnter.append(\"tspan\")\r\n              .attr(\"class\", \"name\")\r\n              .text(dimensionFormatName);\r\n          textEnter.append(\"tspan\")\r\n              .attr(\"class\", \"sort alpha\")\r\n              .attr(\"dx\", \"2em\")\r\n              .text(\"alpha »\")\r\n              .on(\"mousedown.parsets\", cancelEvent);\r\n          textEnter.append(\"tspan\")\r\n              .attr(\"class\", \"sort size\")\r\n              .attr(\"dx\", \"2em\")\r\n              .text(\"size »\")\r\n              .on(\"mousedown.parsets\", cancelEvent);\r\n          dimension.merge(dEnter)\r\n              .call(d3.drag()\r\n                // .origin(identity)\r\n                .on(\"start\", function(e, d) {\r\n                  dragging = true;\r\n                  d.y0 = d.y;\r\n                })\r\n                .on(\"drag\", function(e, d) {\r\n                  d.y0 = d.y = e.y;\r\n                  for (var i = 1; i < dimensions.length; i++) {\r\n                    if (height * dimensions[i].y < height * dimensions[i - 1].y) {\r\n                      dimensions.sort(compareY);\r\n                      dimensionNames = dimensions.map(dimensionName);\r\n                      ordinal.domain([]).range(d3.range(dimensions[0].categories.length));\r\n                      nodes = layout(tree = buildTree({children: {}, count: 0}, data, dimensionNames, value_), dimensions, ordinal);\r\n                      total = getTotal(dimensions);\r\n                      g.selectAll(\".ribbon, .ribbon-mouse\").selectAll(\"path\").remove();                      \r\n                      updateCategories(dimension.merge(dEnter));\r\n                      updateRibbons();\r\n                      dimension.merge(dEnter).transition().duration(duration)\r\n                          .attr(\"transform\", translateY)\r\n                          .tween(\"ribbon\", ribbonTweenY);\r\n\r\n                      // This isn't really doing anything...\r\n                      event.call(\"sortDimensions\");\r\n                      break;\r\n                    }\r\n                  }\r\n                  d3.select(this)\r\n                      .attr(\"transform\", \"translate(0,\" + d.y + \")\")\r\n                      .transition();\r\n                  ribbon.merge(ribbonEnter).filter(function(r) { return r.source.dimension === d || r.target.dimension === d; })\r\n                      .attr(\"d\", ribbonPath);\r\n                })\r\n                .on(\"end\", function(e, d) {\r\n                  dragging = false;\r\n                  unhighlight();\r\n                  var y0 = 45,\r\n                      dy = (height - y0 - 2) / (dimensions.length - 1);\r\n                  dimensions.forEach(function(d, i) {\r\n                    d.y = y0 + i * dy;\r\n                  });\r\n                  transition(d3.select(this))\r\n                      .attr(\"transform\", \"translate(0,\" + d.y + \")\")\r\n                      .tween(\"ribbon\", ribbonTweenY);\r\n                }));\r\n          dimension.merge(dEnter).select(\"text\").select(\"tspan.sort.alpha\")\r\n              .on(\"click.parsets\", sortBy(\"alpha\", function(a, b) { return a.name < b.name ? 1 : -1; }, dimension));\r\n          dimension.merge(dEnter).select(\"text\").select(\"tspan.sort.size\")\r\n              .on(\"click.parsets\", sortBy(\"size\", function(a, b) { return a.count - b.count; }, dimension));\r\n          dimension.merge(dEnter).transition().duration(duration)\r\n              .attr(\"transform\", function(d) { return \"translate(0,\" + d.y + \")\"; })\r\n              .tween(\"ribbon\", ribbonTweenY);\r\n          dimension.exit().remove();\r\n\r\n          updateCategories(dimension.merge(dEnter));\r\n          updateRibbons();\r\n        }\r\n\r\n        function sortBy(type, f, dimension) {\r\n          return function(e, d) {\r\n            var direction = this.__direction = -(this.__direction || 1);\r\n            d3.select(this).text(direction > 0 ? type + \" »\" : \"« \" + type);\r\n            d.categories.sort(function() { return direction * f.apply(this, arguments); });\r\n            nodes = layout(tree, dimensions, ordinal);\r\n            updateRibbons();\r\n            updateCategories(dimension.merge(dimension.enter()));\r\n            \r\n            event.call(\"sortCategories\");\r\n          };\r\n        }\r\n\r\n        function updateRibbons() {\r\n          //console.log(\"UpdateRibbons\")\r\n          ribbon = g.select(\".ribbon\").selectAll(\"path\")\r\n              .data(nodes, function(d) { return d.path; });\r\n          ribbonEnter = ribbon.enter().append(\"path\")\r\n              .each(function(d) {\r\n                d.source.x0 = d.source.x;\r\n                d.target.x0 = d.target.x;\r\n              });\r\n\r\n          ribbonEnter.merge(ribbon)\r\n              .attr(\"class\", function(d) { return \"category-\" + d.major; })\r\n              .attr(\"d\", ribbonPath);\r\n          ribbonEnter.merge(ribbon).sort(function(a, b) { return b.count - a.count; });\r\n          ribbon.exit().remove();\r\n\r\n\r\n          var mouse = g.select(\".ribbon-mouse\").selectAll(\"path\")\r\n              .data(nodes, function(d) { return d.path; });\r\n          var mouseEnter = mouse.enter().append(\"path\");   \r\n\r\n          mouseEnter.merge(mouse)\r\n              .on(\"mousemove.parsets\", function(e, d) {\r\n                unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\r\n                if (dragging) return;\r\n                highlight(d = d.node, true);\r\n                showTooltip(tooltip_.call(this, d), e);\r\n                e.stopPropagation();\r\n                //d3.event.stopPropagation();\r\n              })\r\n              .on(\"click.parsets\",function(e, d){\r\n                ribbon.merge(ribbonEnter).classed(\"active\", false);\r\n                ribbon.merge(ribbonEnter).classed(\"selected\", false);\r\n                if (dragging) return;\r\n                highlightAndSelect(d = d.node, true);\r\n                //console.log(\"ribbon Click\", d);\r\n                event.call(\"ribbonClick\",this, {\"data\":d,\"selected\":true});\r\n                //highlight(d = d.node, true);\r\n                e.stopPropagation();\r\n              });\r\n          mouse.merge(mouseEnter)\r\n              .sort(function(a, b) { return b.count - a.count; })\r\n              .attr(\"d\", ribbonPathStatic);\r\n          mouse.exit().remove();\r\n        }\r\n\r\n        // Animates the x-coordinates only of the relevant ribbon paths.\r\n        function ribbonTweenX(d) {\r\n          var nodes = [d],\r\n              r = ribbon.merge(ribbonEnter).filter(function(r) {\r\n                var s, t;\r\n                if (r.source.node === d) nodes.push(s = r.source);\r\n                if (r.target.node === d) nodes.push(t = r.target);\r\n                return s || t;\r\n              }),\r\n              i = nodes.map(function(d) { return d3.interpolateNumber(d.x0, d.x); }),\r\n              n = nodes.length;\r\n          return function(t) {\r\n            for (var j = 0; j < n; j++) nodes[j].x0 = i[j](t);\r\n            r.attr(\"d\", ribbonPath);\r\n          };\r\n        }\r\n\r\n        // Animates the y-coordinates only of the relevant ribbon paths.\r\n        function ribbonTweenY(d) {\r\n          var r = ribbon.merge(ribbonEnter).filter(function(r) { return r.source.dimension.name == d.name || r.target.dimension.name == d.name; }),\r\n              i = d3.interpolateNumber(d.y0, d.y);\r\n          return function(t) {\r\n            d.y0 = i(t);\r\n            r.attr(\"d\", ribbonPath);\r\n          };\r\n        }\r\n\r\n        // Highlight a node and its descendants, and optionally its ancestors.\r\n        function highlight(d, ancestors) {\r\n          if (dragging) return;\r\n          var highlight = [];\r\n          (function recurse(d) {\r\n            highlight.push(d);\r\n            for (var k in d.children) recurse(d.children[k]);\r\n          })(d);\r\n          highlight.shift();\r\n          if (ancestors) while (d) {\r\n            highlight.push(d); d = d.parent;\r\n          }\r\n          ribbon.merge(ribbonEnter).filter(function(d) {\r\n            var active = highlight.indexOf(d.node) >= 0;\r\n            if (active) this.parentNode.appendChild(this);\r\n            return active;\r\n          }).classed(\"active\", true);\r\n          \r\n        }\r\n        function highlightAndSelect(d, ancestors) {\r\n          if (dragging) return;\r\n          var highlight = [];\r\n          (function recurse(d) {\r\n            highlight.push(d);\r\n            for (var k in d.children) recurse(d.children[k]);\r\n          })(d);\r\n          highlight.shift();\r\n          if (ancestors) while (d) {\r\n            highlight.push(d); d = d.parent;\r\n          }\r\n          ribbon.merge(ribbonEnter).filter(function(d) {\r\n            var active = highlight.indexOf(d.node) >= 0;\r\n            if (active) this.parentNode.appendChild(this);\r\n            return active;\r\n          }).classed(\"selected\", true).classed(\"active\", true);\r\n          \r\n        }\r\n        function unselectedRibbon(ribbon){\r\n          return ribbon.filter(function(d){\r\n            return !d3.select(this).classed(\"selected\");\r\n          })\r\n        }\r\n        // Unhighlight all nodes.\r\n        function unhighlight() {\r\n          if (dragging) return;\r\n          unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\r\n          hideTooltip();\r\n        }\r\n\r\n        function updateCategories(g) {          \r\n          var category = g.selectAll(\"g.category\")\r\n              .data(function(d) { return d.categories; }, function(d) { return d.dimension.name+\"_\"+d.name; });\r\n          //console.log(\"category\", category);\r\n          var categoryEnter = category.enter().append(\"g\")\r\n              .attr(\"class\", \"category\");\r\n\r\n          categoryEnter.merge(category)\r\n              .attr(\"transform\", function(d) { return \"translate(\" + d.x + \")\"; });\r\n          //console.log(\"Category enter update exit data\", category.enter(), category, category.exit(), g.data())\r\n          // TODO: Don't really understand why I had to comment this one out\r\n          // TODO: Very weird to see the duplicate data. \r\n          // TODO: Suprised when dragging it, I don't see duplicate data.\r\n          //category.exit().remove();\r\n          category\r\n              .merge(categoryEnter)\r\n              .on(\"mousemove.parsets\", function(e, d) {\r\n                // in this d3 version >= 6, pass in event, d\r\n                unselectedRibbon(ribbon.merge(ribbonEnter)).classed(\"active\", false);\r\n                if (dragging) return;\r\n                //console.log(\"d.nodes?\", d);\r\n                d.nodes.forEach(function(d) { highlight(d); });\r\n                showTooltip(categoryTooltip.call(this, d), e);\r\n                e.stopPropagation();\r\n              })\r\n              .on(\"mouseout.parsets\", unhighlight)\r\n              .on(\"mousedown.parsets\", cancelEvent)\r\n              \r\n              .call(d3.drag()\r\n                // .origin(identity)\r\n                .on(\"start\", function(e, d) {\r\n                  dragging = true;\r\n                  d.x0 = d.x;\r\n                })\r\n                .on(\"drag\", function(e2, d) {\r\n                  d.x = e2.x;\r\n                  var categories = d.dimension.categories;\r\n                  for (var i = 0, c = categories[0]; ++i < categories.length;) {\r\n                    if (c.x + c.dx / 2 > (c = categories[i]).x + c.dx / 2) {\r\n                      categories.sort(function(a, b) { return a.x + a.dx / 2 - b.x - b.dx / 2; });\r\n                      nodes = layout(tree, dimensions, ordinal);\r\n                      updateRibbons();\r\n                      updateCategories(g);\r\n                      highlight(d.node);\r\n                      event.call(\"sortCategories\");\r\n                      break;\r\n                    }\r\n                  }\r\n                  var x = 0,\r\n                      p = spacing / (categories.length - 1);\r\n                  categories.forEach(function(e) {\r\n                    if (d === e) e.x0 = e2.x;\r\n                    e.x = x;\r\n                    x += e.count / total * (width - spacing) + p;\r\n                  });\r\n                  d3.select(this)\r\n                      .attr(\"transform\", function(d) { return \"translate(\" + d.x0 + \")\"; })\r\n                      .transition();\r\n                  ribbon.merge(ribbonEnter).filter(function(r) { return r.source.node === d || r.target.node === d; })\r\n                      .attr(\"d\", ribbonPath);\r\n                })\r\n                .on(\"end\", function(e, d) {\r\n                  dragging = false;\r\n                  unhighlight();\r\n                  updateRibbons();\r\n                  transition(d3.select(this))\r\n                      .attr(\"transform\", \"translate(\" + d.x + \")\")\r\n                      .tween(\"ribbon\", ribbonTweenX);\r\n                }))\r\n                .on(\"click.parsets\",function(e, d){\r\n                  if (dragging) return;\r\n                  ribbon.merge(ribbonEnter).classed(\"active\", false);\r\n                  ribbon.merge(ribbonEnter).classed(\"selected\", false);\r\n                  \r\n                  d.nodes.forEach(function(d) { highlightAndSelect(d); });\r\n                  event.call(\"categoryClick\",this, {\"data\":d,\"selected\":true});\r\n                  e.stopPropagation();\r\n                });\r\n          category.merge(categoryEnter).transition().duration(duration)\r\n              .attr(\"transform\", function(d) { return \"translate(\" + d.x + \")\"; })\r\n              .tween(\"ribbon\", ribbonTweenX);\r\n\r\n          categoryEnter.append(\"rect\")\r\n              .attr(\"width\", function(d) { return d.dx; })\r\n              .attr(\"y\", -20)\r\n              .attr(\"height\", 20);\r\n          categoryEnter.append(\"line\")\r\n              .style(\"stroke-width\", 2);\r\n          categoryEnter.append(\"text\")\r\n              .attr(\"dy\", \"-.3em\");\r\n          category.merge(categoryEnter).select(\"rect\")\r\n              .attr(\"width\", function(d) { return d.dx; })\r\n              .attr(\"class\", function(d) {\r\n                return \"category-\" + (d.dimension === dimensions[0] ? ordinal(d.name) : \"background\");\r\n              });\r\n          category.merge(categoryEnter).select(\"line\")\r\n              .attr(\"x2\", function(d) { return d.dx; });\r\n          category.merge(categoryEnter).select(\"text\")\r\n              .text(truncateText(function(d) { return d.name; }, function(d) { return d.dx; }));\r\n        }\r\n      });\r\n    }\r\n\r\n    parsets.dimensionFormat = function(_) {\r\n      if (!arguments.length) return dimensionFormat;\r\n      dimensionFormat = _;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.dimensions = function(_) {\r\n      if (!arguments.length) return dimensions_;\r\n      dimensions_ = d3_functor(_);\r\n      return parsets;\r\n    };\r\n\r\n    parsets.value = function(_) {\r\n      if (!arguments.length) return value_;\r\n      value_ = d3_functor(_);\r\n      return parsets;\r\n    };\r\n\r\n    parsets.width = function(_) {\r\n      if (!arguments.length) return width;\r\n      width = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.height = function(_) {\r\n      if (!arguments.length) return height;\r\n      height = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.spacing = function(_) {\r\n      if (!arguments.length) return spacing;\r\n      spacing = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.tension = function(_) {\r\n      if (!arguments.length) return tension;\r\n      tension = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.duration = function(_) {\r\n      if (!arguments.length) return duration;\r\n      duration = +_;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.tooltip = function(_) {\r\n      if (!arguments.length) return tooltip;\r\n      tooltip_ = _ == null ? defaultTooltip : _;\r\n      return parsets;\r\n    };\r\n\r\n    parsets.categoryTooltip = function(_) {\r\n      if (!arguments.length) return categoryTooltip;\r\n      categoryTooltip = _ == null ? defaultCategoryTooltip : _;\r\n      return parsets;\r\n    };\r\n\r\n    var body = d3.select(\"body\");\r\n    var tooltip = body.append(\"div\")\r\n        .style(\"display\", \"none\")\r\n        .attr(\"class\", \"parsets tooltip\");\r\n\r\n    return d3.rebind(parsets, event, \"on\").value(1).width(960).height(600);\r\n\r\n    function dimensionFormatName(d, i) {\r\n      return dimensionFormat.call(this, d.name, i);\r\n    }\r\n\r\n    function showTooltip(html, event) {\r\n      var m = d3.pointer(event, body.node());\r\n      //var m = d3.mouse(body.node());\r\n      //console.log(\"m\", m);\r\n      tooltip\r\n          .style(\"display\", null)\r\n          .style(\"left\", m[0] + 30 + \"px\")\r\n          .style(\"top\", m[1] - 20 + \"px\")\r\n          .html(html);\r\n    }\r\n\r\n    function hideTooltip() {\r\n      tooltip.style(\"display\", \"none\");\r\n    }\r\n\r\n    function transition(g) {\r\n      return duration ? g.transition().duration(duration).ease(parsetsEase) : g;\r\n    }\r\n\r\n    function layout(tree, dimensions, ordinal) {\r\n      var nodes = [],\r\n          nd = dimensions.length,\r\n          y0 = 45,\r\n          dy = (height - y0 - 2) / (nd - 1);\r\n      dimensions.forEach(function(d, i) {\r\n        d.categories.forEach(function(c) {\r\n          c.dimension = d;\r\n          c.count = 0;\r\n          c.nodes = [];\r\n        });\r\n        d.y = y0 + i * dy;\r\n      });\r\n\r\n      // Compute per-category counts.\r\n      var total = (function rollup(d, i) {\r\n        if (!d.children) return d.count;\r\n        var dim = dimensions[i],\r\n            total = 0;\r\n        dim.categories.forEach(function(c) {\r\n          var child = d.children[c.name];\r\n          if (!child) return;\r\n          c.nodes.push(child);\r\n          var count = rollup(child, i + 1);\r\n          c.count += count;\r\n          total += count;\r\n        });\r\n        return total;\r\n      })(tree, 0);\r\n\r\n      // Stack the counts.\r\n      dimensions.forEach(function(d) {\r\n        d.categories = d.categories.filter(function(d) { return d.count; });\r\n        var x = 0,\r\n            p = spacing / (d.categories.length - 1);\r\n        d.categories.forEach(function(c) {\r\n          c.x = x;\r\n          c.dx = c.count / total * (width - spacing);\r\n          c.in = {dx: 0};\r\n          c.out = {dx: 0};\r\n          x += c.dx + p;\r\n        });\r\n      });\r\n\r\n      var dim = dimensions[0];\r\n      \r\n      //console.log(\"dimensions\", dim, dimensions)\r\n      dim.categories.forEach(function(c) {\r\n        var k = c.name;\r\n        if (tree.children.hasOwnProperty(k)) {\r\n          recurse(c, {node: tree.children[k], path: k}, 1, ordinal(k));\r\n        }\r\n      });\r\n\r\n      function recurse(p, d, depth, major) {\r\n        var node = d.node,\r\n            dimension = dimensions[depth];\r\n        dimension.categories.forEach(function(c) {\r\n          var k = c.name;\r\n          if (!node.children.hasOwnProperty(k)) return;\r\n          var child = node.children[k];\r\n          child.path = d.path + \"\\0\" + k;\r\n          var target = child.target || {node: c, dimension: dimension};\r\n          target.x = c.in.dx;\r\n          target.dx = child.count / total * (width - spacing);\r\n          c.in.dx += target.dx;\r\n          var source = child.source || {node: p, dimension: dimensions[depth - 1]};\r\n          source.x = p.out.dx;\r\n          source.dx = target.dx;\r\n          p.out.dx += source.dx;\r\n\r\n          child.node = child;\r\n          child.source = source;\r\n          child.target = target;\r\n          child.major = major;\r\n          nodes.push(child);\r\n          if (depth + 1 < dimensions.length) recurse(c, child, depth + 1, major);\r\n        });\r\n      }\r\n      return nodes;\r\n    }\r\n\r\n    // Dynamic path string for transitions.\r\n    function ribbonPath(d) {\r\n      var s = d.source,\r\n          t = d.target;\r\n      return ribbonPathString(s.node.x0 + s.x0, s.dimension.y0, s.dx, t.node.x0 + t.x0, t.dimension.y0, t.dx, tension0);\r\n    }\r\n\r\n    // Static path string for mouse handlers.\r\n    function ribbonPathStatic(d) {\r\n      var s = d.source,\r\n          t = d.target;\r\n      return ribbonPathString(s.node.x + s.x, s.dimension.y, s.dx, t.node.x + t.x, t.dimension.y, t.dx, tension);\r\n    }\r\n\r\n    function ribbonPathString(sx, sy, sdx, tx, ty, tdx, tension) {\r\n      var m0, m1;\r\n      return (tension === 1 ? [\r\n          \"M\", [sx, sy],\r\n          \"L\", [tx, ty],\r\n          \"h\", tdx,\r\n          \"L\", [sx + sdx, sy],\r\n          \"Z\"]\r\n       : [\"M\", [sx, sy],\r\n          \"C\", [sx, m0 = tension * sy + (1 - tension) * ty], \" \",\r\n               [tx, m1 = tension * ty + (1 - tension) * sy], \" \", [tx, ty],\r\n          \"h\", tdx,\r\n          \"C\", [tx + tdx, m1], \" \", [sx + sdx, m0], \" \", [sx + sdx, sy],\r\n          \"Z\"]).join(\"\");\r\n    }\r\n\r\n    function compareY(a, b) {\r\n      a = height * a.y; b = height * b.y;\r\n      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : a <= a ? -1 : b <= b ? 1 : NaN;\r\n    }\r\n  };\r\n  d3.parsets.tree = buildTree;\r\n\r\n  function autoDimensions(d) {\r\n    return d.length ? d3.keys(d[0]).sort() : [];\r\n  }\r\n\r\n  function cancelEvent(e, d) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  function dimensionName(d) { return d.name; }\r\n\r\n  function getTotal(dimensions) {\r\n    return dimensions[0].categories.reduce(function(a, d) {\r\n      return a + d.count;\r\n    }, 0);\r\n  }\r\n\r\n  // Given a text function and width function, truncates the text if necessary to\r\n  // fit within the given width.\r\n  function truncateText(text, width) {\r\n    return function(d, i) {\r\n      var t = this.textContent = text(d, i),\r\n          w = width(d, i);\r\n      if (this.getComputedTextLength() < w) return t;\r\n      this.textContent = \"…\" + t;\r\n      var lo = 0,\r\n          hi = t.length + 1,\r\n          x;\r\n      while (lo < hi) {\r\n        var mid = lo + hi >> 1;\r\n        if ((x = this.getSubStringLength(0, mid)) < w) lo = mid + 1;\r\n        else hi = mid;\r\n      }\r\n      return lo > 1 ? t.substr(0, lo - 2) + \"…\" : \"\";\r\n    };\r\n  }\r\n\r\n  var percent = d3.format(\".2%\"),\r\n      comma = d3.format(\"d\"),\r\n      parsetsEase = d3.easeElastic,\r\n      parsetsId = 0;\r\n\r\n  // Construct tree of all category counts for a given ordered list of\r\n  // dimensions.  Similar to d3.nest, except we also set the parent.\r\n  function buildTree(root, data, dimensions, value) {\r\n    zeroCounts(root);\r\n    var n = data.length,\r\n        nd = dimensions.length;\r\n    for (var i = 0; i < n; i++) {\r\n      var d = data[i],\r\n          v = +value(d, i),\r\n          node = root;\r\n      for (var j = 0; j < nd; j++) {\r\n        var dimension = dimensions[j],\r\n            category = d[dimension],\r\n            children = node.children;\r\n        node.count += v;\r\n        node = children.hasOwnProperty(category) ? children[category]\r\n            : children[category] = {\r\n              children: j === nd - 1 ? null : {},\r\n              count: 0,\r\n              parent: node,\r\n              dimension: dimension,\r\n              name: category\r\n            };\r\n      }\r\n      node.count += v;\r\n    }\r\n    return root;\r\n  }\r\n\r\n  function zeroCounts(d) {\r\n    d.count = 0;\r\n    if (d.children) {\r\n      for (var k in d.children) zeroCounts(d.children[k]);\r\n    }\r\n  }\r\n\r\n  function identity(d) { return d; }\r\n\r\n  function translateY(d) { return \"translate(0,\" + d.y + \")\"; }\r\n\r\n  function defaultTooltip(d) {\r\n    var count = d.count,\r\n        path = [];\r\n    while (d.parent) {\r\n      if (d.name) path.unshift(d.name);\r\n      d = d.parent;\r\n    }\r\n    return path.join(\" → \") + \"<br>\" + comma(count) + \" (\" + percent(count / d.count) + \")\";\r\n  }\r\n\r\n  function defaultCategoryTooltip(d) {\r\n    return d.name + \"<br>\" + comma(d.count) + \" (\" + percent(d.count / d.dimension.count) + \")\";\r\n  }\r\n})();","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n// If enable, then it will load static data. Otherwise, it will load from remote backend.\r\n// Currently, it does not support remote backend mode. \r\nconst ENABLE_STATIC_JSON = true;\r\nexport const ENABLE_FORCE_AUTH = false;\r\n// Remote Backend.\r\nconst URL = process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:7777'\r\n    : window.location.origin;\r\nconst axiosInstance1 = axios.create({\r\n    baseURL: `${URL}/api/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\n// Load Static Data.\r\nconst URL2 = window.location.href;\r\n//const URL2 = window.location.origin;\r\nconst axiosInstance2 = axios.create({\r\n    baseURL: `${URL2}/data/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\nlet axiosInstance = (ENABLE_STATIC_JSON)?axiosInstance2:axiosInstance1;\r\nlet TOKEN:any = \"\";\r\n\r\n\r\n// Read graph dataset metainfo.\r\nexport async function getUserVerify(username: any, password:any): Promise<any> {\r\n    let url = `/user_verify`;\r\n    const params = { username, password};\r\n    const res = await axiosInstance.get(url, {params}); // EXCEPTION\r\n    //const params = { classifier_start, classifier_end };\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nfunction wrap_params_with_token(params: any){\r\n    if(ENABLE_FORCE_AUTH){\r\n        const new_params:any = {\r\n            token: TOKEN,\r\n            ...params\r\n        };\r\n        return new_params;\r\n    }else{\r\n        return params;\r\n    }\r\n    \r\n    \r\n    \r\n}\r\nexport function setToken(token:any) {\r\n    TOKEN = token;\r\n}\r\n\r\n// Read graph dataset metainfo.\r\nexport async function getData(): Promise<any> {\r\n    let url = `/data`;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/data.json'\r\n    }\r\n    //const params = { classifier_start, classifier_end };\r\n    const params = wrap_params_with_token({});\r\n\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read graph dataset metainfo.\r\nexport async function getExploreMetaData(): Promise<any> {\r\n    let url = `/explore`;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/explore.json'\r\n    }\r\n    //const params = { classifier_start, classifier_end };\r\n    const params = wrap_params_with_token({});\r\n\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read graph dataset metainfo.\r\nexport async function getRawData(dataset:any=\"PASCAL\", filename=\"2008_000348.jpg\"): Promise<any> {\r\n    let url = `/` + dataset + \"/\" + filename;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = `/` + dataset + \"/\" + filename;\r\n    }\r\n    //const params = { classifier_start, classifier_end };\r\n    const params = wrap_params_with_token({});\r\n\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read graph dataset metainfo.\r\nexport async function getDatasetList(): Promise<any> {\r\n    let url = `/datasets`;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/datasetlist.json'\r\n    }\r\n    //const params = { classifier_start, classifier_end };\r\n    const params = wrap_params_with_token({});\r\n\r\n    const res = await axiosInstance.get(url, {params});\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\nexport function getRawDataURL(dataset:any=\"PASCAL\", filename=\"2008_000348.jpg\"){\r\n    let url = `${URL}/api/` + `/` + dataset + \"/\" + filename;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = `${URL2}/data/` + `/` + dataset + \"/\" + filename;\r\n    }\r\n    return url;\r\n}","import { DATASET_ID_CHANGE, TASK_ID_CHANGE, \r\n  INIT_DATASET_LIST, CLEAR_ID_INFO, \r\n  INIT_DATA, API_ID_CHANGE, API_ID_LIST_CHANGE, \r\n  INIT_EXPLORE_META_DATA, MODE_ID_CHANGE, VIEW_MODE_CHANGE} from '../constants';\r\nimport {StoreState} from '../types';\r\nimport { ENABLE_FORCE_AUTH } from '../service/dataService';\r\nconst initial_state : StoreState = {\r\n    dataset_id : 1, // null\r\n    api_id : null, // null\r\n    api_id_list : [1], // []\r\n    datasetList: [],\r\n    user_verify: !ENABLE_FORCE_AUTH,\r\n    data: {},\r\n    explore_meta_data: {},\r\n    task_id : 2, // null\r\n    mode_id: 2, // 1\r\n    view_mode: 1 // 1\r\n}\r\n// 处理并返回 state \r\nexport default (state = initial_state, action:any): StoreState => {\r\n   \r\n    switch (action.type) {\r\n      case VIEW_MODE_CHANGE:\r\n        return {\r\n          ...state,\r\n          view_mode: action.view_mode\r\n        }\r\n      case MODE_ID_CHANGE:\r\n        return {\r\n          ...state,\r\n          mode_id: action.mode_id\r\n        }\r\n      case DATASET_ID_CHANGE:\r\n        // Change dataset id\r\n        return {\r\n          ...state,\r\n          dataset_id: action.dataset_id,\r\n        };\r\n      case API_ID_CHANGE:\r\n        // Change api id\r\n        return {\r\n          ...state,\r\n          api_id: action.api_id,\r\n        };\r\n      case API_ID_LIST_CHANGE:\r\n        // Change api id\r\n        return {\r\n          ...state,\r\n          api_id_list: action.api_id_list,\r\n        };\r\n      case TASK_ID_CHANGE:\r\n        // Change api id\r\n        return {\r\n          ...state,\r\n          task_id: action.task_id,\r\n        };\r\n      case INIT_DATASET_LIST:\r\n        // init dataset list\r\n        return {\r\n          ...state,\r\n          datasetList: action.datasetList\r\n        };\r\n      case INIT_DATA:\r\n        // init dataset list\r\n        return {\r\n          ...state,\r\n          data: action.data\r\n        };\r\n      case INIT_EXPLORE_META_DATA:\r\n        // init dataset list\r\n        return {\r\n          ...state,\r\n          explore_meta_data: action.explore_meta_data\r\n        };\r\n      case CLEAR_ID_INFO:\r\n        return {\r\n          ...state,\r\n          dataset_id : null,\r\n          api_id : null,\r\n          api_id_list: [],\r\n        }\r\n      \r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\n//import { DECREMENT, INCREMENT } from '../constants';\r\n\r\n","// Color Helper\r\n\r\nconst d3_10color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\"];\r\nconst color_brewer1 = [\"#fbb4ae\",\"#b3cde3\", \"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\",\"#e5d8bd\",\"#fddaec\"];\r\nconst color_brewer2 = [\"#b3e2cd\",\"#fdcdac\", \"#cbd5e8\", \"#f4cae4\", \"#e6f5c9\", \"#fff2ae\", \"#f1e2cc\", \"#cccccc\"];\r\nconst COLORS: string[] = [\r\n    \"#1A7AB1\",\r\n    \"#ADC8E6\",\r\n    \"#FF772D\",\r\n    \"#FFB87F\",\r\n    \"#2AA13A\",\r\n    \"#98E090\",\r\n    \"#FF9398\",\r\n    \"#9467B9\",\r\n    \"#C5B0D3\",\r\n    \"#C49B95\",\r\n    \"#E474C0\",\r\n    \"#F7B4D1\",\r\n    \"#BCBC3D\",\r\n    \"#07C1CD\"\r\n    ]\r\n\r\nconst color_collection = d3_10color.concat(color_brewer1).concat(color_brewer2).concat(COLORS);\r\n\r\nconst GREEN: string[] = [\r\n    \"#498B77\",\r\n    \"#89C2AE\",\r\n    \"#C1D6D3\",\r\n    \"#20DF20\"\r\n]\r\nconst BLUE: string[] = [\r\n    \"#3E97C7\",\r\n    \"#72B3CF\",\r\n    \"#8FCCDD\",\r\n    \"#C8DADE\"\r\n\r\n]\r\nconst ORANGE: string[] = [\r\n    \"#E96206\",\r\n    \"#F79143\",\r\n    \"#F6AD76\",\r\n    \"#F7CEA7\"\r\n]\r\nconst PINK: string[] = [\r\n    \"#F6B1C3\",\r\n    \"#F07F93\",\r\n    \"#DE4863\",\r\n    \"#BC0F46\"\r\n\r\n]\r\nconst RED: string[] = [\"#DC143C\", \"#E64C4C\"];\r\nconst YELLOW : string[] = ['#fee08b'];\r\nconst GRAY: string[] = ['#999999'];\r\nconst WHITE: string[] = [\"#ffffff\"];\r\n\r\nconst YlGnBu: string[] = [\r\n    \"#ffffd9\",\"#edf8b1\",\"#c7e9b4\",\"#7fcdbb\",\"#41b6c4\",\"#1d91c0\",\"#225ea8\",\"#0c2c84\"\r\n]\r\nconst BlYlRd: string[] = [\r\n    '#313695',\r\n    '#4575b4',\r\n    '#74add1',\r\n    '#abd9e9',\r\n    '#e0f3f8',\r\n    '#ffffbf',\r\n    '#fee090',\r\n    '#fdae61',\r\n    '#f46d43',\r\n    '#d73027',\r\n    '#a50026'\r\n  ];\r\nconst getLineColorMap = () => {\r\n    return BlYlRd;\r\n    // return YlGnBu;\r\n}\r\nconst getLineColor = (attribution:number) => {\r\n    let step = attribution;\r\n    if(step <0){\r\n        step = 0;\r\n    }\r\n    if(step>1){\r\n        step = 1;\r\n    }\r\n    let ColorList = getLineColorMap();\r\n    let color = getLinearColor(ColorList, step)\r\n    return color;\r\n}\r\n\r\nconst getSaliencyColor = (attribution:number) => {\r\n    let step = (attribution + 1 ) / 2;\r\n    if(step <0){\r\n        step = 0;\r\n    }\r\n    if(step>1){\r\n        step = 1;\r\n    }\r\n    let ColorList = [RED[1], WHITE[0], GREEN[3]];\r\n    return getLinearColor(ColorList, step);\r\n}\r\nconst getLinearColor = (ColorList: string[], step:number) => {\r\n    let totalColor = ColorList.length;\r\n    let divide = 1/ (totalColor - 1);\r\n    let location = Math.floor(step / divide);\r\n    if(location == totalColor - 1){\r\n        location = location - 1;\r\n    }\r\n    let offset = step - location * divide;\r\n    let adjusted_offset = offset / divide;\r\n    return getGradientColor(ColorList[location], ColorList[location+1], adjusted_offset);\r\n}\r\nconst getGradientColor = (startColor : string,endColor :string,step : number) => {\r\n    let colorRgb = (sColor : string)=>{\r\n        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n        var sColor = sColor.toLowerCase();\r\n        if(sColor && reg.test(sColor)){\r\n            if(sColor.length === 4){\r\n                var sColorNew = \"#\";\r\n                for(var i=1; i<4; i+=1){\r\n                    sColorNew += sColor.slice(i,i+1).concat(sColor.slice(i,i+1));\r\n                }\r\n                sColor = sColorNew;\r\n            }\r\n            var sColorChange = [];\r\n            for(var i=1; i<7; i+=2){\r\n                sColorChange.push(parseInt(\"0x\"+sColor.slice(i,i+2)));\r\n            }\r\n            return sColorChange;\r\n        }else{\r\n            return sColor;\r\n        }\r\n    };\r\n    startColor = startColor.replace(/\\s+/g,\"\");\r\n    endColor = endColor.replace(/\\s+/g,\"\");\r\n    let startRGB : any = colorRgb(startColor);//转换为rgb数组模式\r\n    //console.log(startRGB);\r\n    let startR = startRGB[0];\r\n    let startG = startRGB[1];\r\n    let startB = startRGB[2];\r\n\r\n    let endRGB : any = colorRgb(endColor);\r\n    //console.log(endRGB);\r\n\r\n    let endR = endRGB[0];\r\n    let endG = endRGB[1];\r\n    let endB = endRGB[2];\r\n    if(step>1){\r\n        console.log(\"out of range step: \", step);\r\n        step = 1;\r\n    }else if(step<0){\r\n        console.log(\"out of range step: \", step);\r\n        step = 0;\r\n    }\r\n    let sR = (endR-startR)*step;//总差值\r\n    let sG = (endG-startG)*step;\r\n    let sB = (endB-startB)*step;\r\n    var R = parseInt((sR+startR));\r\n    var G = parseInt((sG+startG));\r\n    var B = parseInt((sB+startB));\r\n    var strHex = \"#\";\r\n    var aColor = new Array();\r\n    aColor[0] = R;\r\n    aColor[1] = G;\r\n    aColor[2] = B;\r\n    for(let j=0; j<3; j++){\r\n        let hex : string = Number(aColor[j]).toString(16);\r\n        let shex : string = Number(aColor[j])<16 ? '0'+hex :hex;\r\n        if(shex === \"0\"){\r\n            shex += shex;\r\n        }\r\n        strHex += shex;\r\n    }\r\n    return strHex;\r\n}\r\n\r\nfunction hexToRgbA(hex:any, alpha:any){\r\n    var c:any;\r\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\r\n        c= hex.substring(1).split('');\r\n        if(c.length== 3){\r\n            c= [c[0], c[0], c[1], c[1], c[2], c[2]];\r\n        }\r\n        c= '0x'+c.join('');\r\n        return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+','+alpha+')';\r\n    }\r\n    console.log(\"Bad Hex\", hex, alpha);\r\n    return 'rgba(0,0,0,1)';\r\n    //throw new Error('Bad Hex');\r\n}\r\nfunction setsAreEqual(a:any, b:any) {\r\n    if (a.size !== b.size) {\r\n      return false;\r\n    }\r\n  \r\n    return Array.from(a).every(element => {\r\n      return b.has(element);\r\n    });\r\n  }\r\nfunction arraysEqual(a:any, b:any) {\r\n    if (a === b) return true;\r\n    if (a==null || b==null){\r\n        console.log(\"one of array is null\", a, b);\r\n        return false;\r\n    }\r\n    if (a.length !== b.length) return false;\r\n  \r\n    // If you don't care about the order of the elements inside\r\n    // the array, you should sort both arrays here.\r\n    // Please note that calling sort on an array will modify that array.\r\n    // you might want to clone your array first.\r\n  \r\n    for (var i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n// hexToRgbA('#fbafff')\r\nconst EChartsColor = [\r\n    \"#c23531\",\r\n    \"#2f4554\",\r\n    \"#61a0a8\",\r\n    \"#d48265\",\r\n    \"#91c7ae\",\r\n    \"#749f83\"\r\n]\r\n\r\nconst DefaultColor = BLUE[1];\r\nconst StartColor = BLUE[0];\r\nconst EndColor = RED[0];\r\nconst getCoraNodeColor = ( node_label:number,color_encode:number = 2) =>{\r\n    if(color_encode === 1 || color_encode === 2 || color_encode === 3){\r\n        return d3_10color[node_label];\r\n    }else if(color_encode === 5){\r\n        if(node_label){\r\n            return GREEN[0];\r\n        }else{\r\n            return RED[0];\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nconst getLegendColor = (index:number) => {\r\n    let length = color_collection.length;\r\n    return color_collection[index % length];\r\n}\r\n\r\n// Transform Data Helper\r\n\r\n// Construct Graph In from Graph obj\r\nfunction constructGraphIn(graph_obj:any){\r\n    let senders = graph_obj.srcs;\r\n    let receivers = graph_obj.dsts;\r\n    let num_nodes = graph_obj.num_nodes;\r\n    return {\r\n        \"senders\":senders,\r\n        \"receivers\":receivers,\r\n        \"num_nodes\":num_nodes\r\n    }\r\n}\r\n\r\n\r\n// Construct Neighbor Set from Graph in. \r\nfunction constructNeighborSet(graph_in:any){\r\n    // Input: Graph_in\r\n    //   senders:  source of edges.\r\n    //   receivers:   target of edges.\r\n    //   node_num:  number of nodes.\r\n    // Output: \r\n    //   NeighborSet: Dict[Key] <-- incoming neighbors.\r\n    let senders = graph_in.senders;\r\n    let receivers = graph_in.receivers;\r\n    let node_num = graph_in.num_nodes;\r\n    let NeighborSet:any = {};\r\n    for(let i = 0; i<node_num ;i++){\r\n        NeighborSet[i] = [];\r\n    }\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in NeighborSet){\r\n        }else{\r\n            NeighborSet[nowreceiver] = []\r\n        }\r\n        NeighborSet[nowreceiver].push(senders[i]);\r\n    }\r\n    return NeighborSet;\r\n}\r\nfunction constructPathDict(message_passing:any){\r\n    let senders = message_passing.senders;\r\n    let receivers = message_passing.receivers;\r\n    let values = message_passing.values;\r\n    let PathDict:any = {};\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in PathDict){\r\n        }else{\r\n            PathDict[nowreceiver] = {}\r\n        }\r\n        PathDict[nowreceiver][senders[i]] = values[i];\r\n    }\r\n    return PathDict;\r\n}\r\nfunction getTrainColor(node_id:any, train_set:any){\r\n    if(train_set.has(node_id)){\r\n        //return \"#fff\";\r\n        return \"#000\";\r\n    }else{\r\n        return \"#fff\";\r\n    }\r\n}\r\nfunction getNodeStatisticStr(selectedNodeLength: number, totalNodeLength: number){\r\n    let str : string = \"\" + selectedNodeLength + \"/\"+ totalNodeLength;\r\n    let percentage : number ;\r\n    if(totalNodeLength === 0){\r\n\r\n    }else{\r\n        percentage = selectedNodeLength / totalNodeLength * 100;\r\n        str = str + \" (\" + percentage.toFixed(2) +\"%)\"\r\n    }\r\n    return str;\r\n}\r\n\r\n\r\nfunction compareSelectedNodeIdList(list_a:any, list_b:any){\r\n    if(list_a.length === list_b.length){\r\n        for(let i = 0; i<list_a.length; i++){\r\n            if(list_a[i] === list_b[i]){\r\n\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction get_boundingbox(graph_layout:any[]){\r\n    if(graph_layout.length === 0){\r\n        return {\r\n            \"xmin\":0,\r\n            \"xmax\":0,\r\n            \"ymin\":0,\r\n            \"ymax\":0\r\n        }\r\n    }else{\r\n        let xmin = graph_layout[0][0];\r\n        let xmax = graph_layout[0][0];\r\n        let ymin = graph_layout[0][1];\r\n        let ymax = graph_layout[0][1];\r\n        for(let i = 0; i< graph_layout.length; i++){\r\n            let nowx = graph_layout[i][0];\r\n            let nowy = graph_layout[i][1];\r\n            if(xmin > nowx){\r\n                xmin = nowx;\r\n            }\r\n            if(xmax < nowx){\r\n                xmax = nowx;\r\n            }\r\n            if(ymin > nowy){\r\n                ymin = nowy;\r\n            }\r\n            if(ymax < nowy){\r\n                ymax = nowy;\r\n            }\r\n        }\r\n        return {\r\n            \"xmin\":xmin,\r\n            \"xmax\":xmax,\r\n            \"ymin\":ymin,\r\n            \"ymax\":ymax\r\n        }\r\n    }\r\n}\r\nfunction transform_graphlayout(graph_layout:any[], width:number, height:number){\r\n    if(graph_layout.length === 0){\r\n        return graph_layout;\r\n    }else{\r\n        let bounding_box = get_boundingbox(graph_layout);\r\n        //let canvas_centerx = 300;\r\n        //let canvas_centery = 300;\r\n        //let width = Swidth;\r\n        //let height = Sheight;\r\n        let margin = 20;\r\n        if(graph_layout.length >= 100){\r\n            margin = 20;\r\n        }\r\n        \r\n        let realwidth = width - 2*margin;\r\n        let realheight = height - 2*margin;\r\n        let gap_x = bounding_box[\"xmax\"] - bounding_box[\"xmin\"];\r\n        let gap_y = bounding_box[\"ymax\"] - bounding_box[\"ymin\"];\r\n        if(gap_x === 0){\r\n            gap_x = 1e-16;\r\n        }\r\n        if(gap_y === 0){\r\n            gap_y = 1e-16;\r\n        }\r\n        let realscale = Math.min(realwidth / gap_x, realheight / gap_y);\r\n        let left = margin + (realwidth - realscale * gap_x) / 2;\r\n        let top = margin + (realheight - realscale * gap_y) / 2; \r\n        let xmin = bounding_box[\"xmin\"];\r\n        let ymin = bounding_box[\"ymin\"];\r\n        let new_graph_layout = [];\r\n        for(let i = 0; i< graph_layout.length; i++){\r\n            let nowx = graph_layout[i][0];\r\n            let nowy = graph_layout[i][1];\r\n            let locx = left+ (nowx - xmin) * realscale;\r\n            let locy = top + (nowy - ymin) * realscale;\r\n            new_graph_layout.push([locx,locy]);\r\n        }\r\n        return new_graph_layout;\r\n    }\r\n}\r\nfunction skew_weight(weight:any, range_min:any=0.1, range_max:any=1){\r\n    // Assume weight is [0,1]\r\n    return (weight - 0) * 0.9 + range_min;\r\n}\r\n\r\nfunction assert_key(pkg:any, key_list:any, verbose:boolean=false, pkg_name:any = \"\"){\r\n    let flag = true;\r\n    let pkg_key_list = Object.keys(pkg);\r\n    for(let i = 0; i<key_list.length; i++){\r\n        if(pkg_key_list.indexOf(key_list[i]) >= 0){\r\n\r\n        }else{\r\n            flag =  false;\r\n            if(verbose){\r\n                let message = \"\"+key_list[i]+\" is required.\";\r\n                if(pkg_name){\r\n                    message = \"\"+key_list[i]+\" is required in \" + pkg_name +\" .\";\r\n                }\r\n                console.log(message);\r\n            }\r\n        }\r\n    }\r\n    return flag;\r\n}\r\nfunction assert_key_hier(pkg:any, key_hier_list:any, verbose:boolean=true, pkg_name:any = \"\"){\r\n    let filtered_key_hier_list = key_hier_list.filter((d:any)=>{\r\n        return Object.keys(d).indexOf(\"n\")>=0;\r\n    });\r\n    let first_level_key_list = filtered_key_hier_list.map((d:any)=>{\r\n        return d[\"n\"];\r\n    });\r\n    let first_key_flag = assert_key(pkg, first_level_key_list, verbose, pkg_name);\r\n    if(first_key_flag){\r\n        let flag = true;\r\n        for(let i = 0; i<filtered_key_hier_list.length; i++){\r\n            let name = filtered_key_hier_list[i][\"n\"];\r\n            if(Object.keys(filtered_key_hier_list[i]).indexOf(\"c\")>=0){\r\n                let children = filtered_key_hier_list[i][\"c\"];\r\n                let local_flag = assert_key_hier(pkg[name], children, verbose, pkg_name+\".\"+name);\r\n                if(!local_flag){\r\n                    flag = false;\r\n                }\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n    return false;\r\n    \r\n}\r\nfunction removeAllChildNodes(parent:any) {\r\n    while (parent.firstChild) {\r\n        parent.removeChild(parent.firstChild);\r\n    }\r\n}\r\n// Get text width before rendering\r\nconst getTextWidth = (text:any, font:any) => {\r\n    const element = document.createElement('canvas');\r\n    const context:any = element.getContext('2d');\r\n    context.font = font;\r\n    return context.measureText(text).width;\r\n}\r\n\r\n// meta text mode\r\n\r\nconst MODE_OPTIONS = [\"Metrics\", \"Explore\"];\r\nfunction get_mode_options(){\r\n    return MODE_OPTIONS;\r\n}\r\nfunction safe_extract_item_from_list(id:any, items:any, default_ret:any=\"\"){\r\n    let selected_name:any = default_ret;\r\n    if(id){\r\n        let index = id - 1;\r\n        if(index >= 0 && index < items.length){\r\n            selected_name = items[index];\r\n        }\r\n    }\r\n    return selected_name;\r\n}\r\nfunction safe_extract_items_from_list(id_list:any, items:any, default_ret:any=[]){\r\n    let selected_name_list:any = default_ret;\r\n    if(id_list){\r\n        id_list.forEach((d:any)=>{\r\n            let selected_name = safe_extract_item_from_list(d, items);\r\n            if(selected_name){\r\n                selected_name_list.push(selected_name);\r\n            }else{\r\n                console.log(\"WARNING: some data are not found.\", d);\r\n            }\r\n        })\r\n    }\r\n    return selected_name_list;\r\n}\r\n\r\nfunction addRange(a:any,b:any){\r\n    if(a[\"active\"]){\r\n        if(a[\"end\"]<b[\"start\"]){\r\n            return {\r\n                \"active\":true,\r\n                \"start\":a[\"start\"],\r\n                \"end\":b[\"end\"],\r\n                \"count\":a[\"count\"]+b[\"count\"]\r\n            }\r\n        }else{\r\n            console.log(\"invalid added\");\r\n            return {\r\n                \"active\":false\r\n            }\r\n        }\r\n        \r\n    }else{\r\n        if(b[\"active\"]){\r\n            return b;\r\n        }else{\r\n            console.log(\"inactive added\");\r\n            return {\r\n                \"active\":false\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction binningContinuousVariable(continuous_variable_list:any, bucket_num:number=8){\r\n    let nodenum = continuous_variable_list.length;\r\n    let distribution:any = {};\r\n    for(let i = 0; i<nodenum; i++){\r\n        if(distribution[continuous_variable_list[i]]){\r\n            distribution[continuous_variable_list[i]] = distribution[continuous_variable_list[i]]+1;\r\n\r\n        }else{\r\n            distribution[continuous_variable_list[i]] = 1;\r\n        }\r\n    }\r\n    let key:any = Object.keys(distribution);\r\n    let new_key:any = [];\r\n    for(let i = 0; i<key.length; i++){\r\n        new_key.push(parseFloat(key[i]));\r\n    }\r\n    let compare_number = (a:number, b:number)=>{\r\n        return a-b;\r\n    }\r\n    new_key = new_key.sort(compare_number);\r\n    //console.log(new_degree_key);\r\n    let range_list = [];\r\n    let prev_range = {\r\n        \"active\":false\r\n    }\r\n    let current_range:any = {\r\n        \"active\":false\r\n    }\r\n\r\n    let single_bucket_count = nodenum / bucket_num;\r\n    for(let i = 0; i<new_key.length; i++){\r\n        let this_range = {\r\n            \"active\":true,\r\n            \"start\":new_key[i],\r\n            \"end\":new_key[i],\r\n            \"count\":distribution[new_key[i]]\r\n        }\r\n        \r\n        current_range = addRange(prev_range, this_range);\r\n        //console.log(i, prev_range, this_range, current_range);\r\n        // Assume result range is active\r\n        if(current_range[\"active\"]){\r\n            if(current_range[\"count\"]<single_bucket_count){\r\n                if(i === key.length-1){\r\n                    range_list.push(current_range);\r\n                    current_range = {\r\n                        \"active\":false\r\n                    }\r\n                }\r\n            }else if(current_range[\"count\"]>=2*single_bucket_count){\r\n                if(prev_range[\"active\"]){\r\n                    range_list.push(prev_range);\r\n                }\r\n                range_list.push(this_range);\r\n                current_range = {\r\n                    \"active\":false\r\n                }\r\n            }else{\r\n                range_list.push(current_range);\r\n                current_range = {\r\n                    \"active\":false\r\n                }\r\n            }\r\n            prev_range = Object.assign({}, current_range);\r\n        }\r\n    }\r\n    for(let i = 0; i<range_list.length; i++){\r\n        let start = range_list[i][\"start\"];\r\n        let end = range_list[i][\"end\"];\r\n        if(start === end){\r\n            range_list[i][\"name\"] = \"\"+end;\r\n        }else{\r\n            range_list[i][\"name\"] = \"[\"+start.toFixed(2)+\",\"+end.toFixed(2)+\"]\";\r\n        }\r\n    }\r\n    return range_list;\r\n}\r\n\r\nfunction getContinuousVariableCategory(value:number, value_list:any){\r\n    for(let i = 0; i<value_list.length; i++){\r\n        let start = value_list[i][\"start\"];\r\n        let end = value_list[i][\"end\"];\r\n        //console.log(degree, start, end);\r\n        if(value>=start && value<=end){\r\n            return value_list[i][\"name\"];\r\n        }\r\n    }\r\n    return \"\"+value;\r\n}\r\n////////////////////////////\r\n\r\n\r\n// System Overview Config\r\nenum SystemDesign{\r\n    FULL = 1,\r\n    EXCLUEDE_INSTANCE_VIEW = 2\r\n}\r\n\r\nconst DECIMAL = 2;\r\nlet layout_config_version:any = {\r\n    \"System\": SystemDesign.FULL\r\n}\r\nfunction getLayoutConfig(name:any=\"System\"){\r\n    if(Object.keys(layout_config_version).indexOf(name)>=0){\r\n        return layout_config_version[name];\r\n    }else{\r\n        return layout_config_version[\"System\"];\r\n    }\r\n}\r\n\r\nfunction getDecimal(){\r\n    return DECIMAL;\r\n}\r\n\r\n\r\n\r\n\r\nexport { RED,YELLOW, EChartsColor,  getSaliencyColor, getLineColor, getCoraNodeColor, constructNeighborSet,  constructPathDict,getTrainColor, \r\n     compareSelectedNodeIdList,getNodeStatisticStr,\r\n     constructGraphIn,transform_graphlayout,skew_weight,\r\n      assert_key, assert_key_hier, getLayoutConfig, \r\n      removeAllChildNodes,getTextWidth,getLegendColor,hexToRgbA,\r\n    SystemDesign, getLineColorMap, arraysEqual, setsAreEqual, get_mode_options, \r\n    safe_extract_item_from_list, safe_extract_items_from_list,\r\n    binningContinuousVariable, getContinuousVariableCategory, getDecimal}\r\n","/// data preprocessor\r\nimport { local } from 'd3';\r\nimport {assert_key, getLineColor, assert_key_hier, \r\n    getContinuousVariableCategory,binningContinuousVariable,getDecimal } from './index';\r\nimport {getRawDataURL} from '../service/dataService';\r\nimport {Tag, Progress, Col} from \"antd\";\r\nimport React from 'react';\r\nimport { AnyAaaaRecord } from 'dns';\r\nfunction extract_task_list(data:any){\r\n    let flag = assert_key(data, [\"TaskNames\"]);\r\n    if(flag){\r\n        return data[\"TaskNames\"];\r\n\r\n    }else{\r\n        return [];\r\n    }\r\n}\r\nfunction verify_task_id(data:any, task_id:any){\r\n    if(task_id){\r\n        let task_list = extract_task_list(data);\r\n        let new_task_id = task_id - 1;\r\n        if(new_task_id >= 0 && new_task_id <task_list.length){\r\n            let task_name = task_list[new_task_id];\r\n            if(Object.keys(data).indexOf(task_name)>=0){\r\n                return {\r\n                    \"success\": true,\r\n                    \"task_name\": task_name\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {\"success\": false};\r\n}\r\nfunction extract_dataset_list(data:any, task_id:any){\r\n    let results = verify_task_id(data, task_id);\r\n    if(results[\"success\"]){\r\n        let task_name = results[\"task_name\"];\r\n        let subdata = data[task_name];\r\n        let flag = assert_key(subdata, [\"DatasetNames\"]);\r\n        if(flag){\r\n            return subdata[\"DatasetNames\"];\r\n        }\r\n    }\r\n    return [];\r\n    \r\n}\r\nfunction extract_explore_dataset_list(data:any){\r\n    let flag = assert_key(data, [\"DatasetNames\"]);\r\n    if(flag){\r\n        return data[\"DatasetNames\"];\r\n    }\r\n    return [];\r\n    \r\n}\r\nfunction extract_api_list(data:any, task_id:any){\r\n    let results = verify_task_id(data, task_id);\r\n    if(results[\"success\"]){\r\n        let task_name = results[\"task_name\"];\r\n        let subdata = data[task_name];\r\n        let flag = assert_key(subdata, [\"APINames\"]);\r\n        if(flag){\r\n            return subdata[\"APINames\"];\r\n        }\r\n    }\r\n    return [];\r\n}\r\nfunction extract_value_from_data(data:any, key:any, dataset_name:any, api_name:any, decimal:number=-1){\r\n    // return {\"year\", \"acc\"}\r\n    let flag = assert_key(data, [key]);\r\n    if(flag){\r\n        let accuracy_table = data[key];\r\n        let filtered_results = accuracy_table.filter((d:any)=>{\r\n            let flag2 = assert_key(d, [\"Year\", \"value\",\"API\", \"Dataset\"]);\r\n            if(flag2){\r\n                if(d[\"API\"] == api_name && d[\"Dataset\"] == dataset_name){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n        })\r\n        let sorted_results = filtered_results.sort((a:any, b:any)=>{\r\n            return a[\"Year\"] < b[\"Year\"];\r\n        })\r\n        let year = sorted_results.map((d:any)=>{\r\n            return d[\"Year\"]\r\n        })\r\n        let value = sorted_results.map((d:any)=>{\r\n            if(decimal>=1){\r\n                return parseFloat(d[\"value\"].toFixed(decimal))\r\n            }else{\r\n                return d[\"value\"];\r\n            }\r\n        })\r\n        let return_obj = {\r\n            \"year\": year,\r\n            \"value\": value\r\n        }\r\n        return return_obj;\r\n    }else{\r\n        return {};\r\n    }\r\n}\r\nfunction extract_fairness_from_data(data:any, key:any, dataset_name:any, api_name:any){\r\n    // return {\"year\", \"acc\"}\r\n    let flag = assert_key(data, [key]);\r\n    if(flag){\r\n        let accuracy_table = data[key];\r\n        let filtered_results = accuracy_table.filter((d:any)=>{\r\n            let flag2 = assert_key(d, [\"Year\", \"value\",\"API\", \"Dataset\", \"Subgroup\"]);\r\n            if(flag2){\r\n                if(d[\"API\"] == api_name && d[\"Dataset\"] == dataset_name){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }else{\r\n                return false;\r\n            }\r\n        })\r\n        let subgroup_list = Array.from(new Set(filtered_results.map((d:any)=>{\r\n            return d[\"Subgroup\"];\r\n        })));\r\n        let year_list:any = Array.from(new Set(filtered_results.map((d:any)=>{\r\n            return d[\"Year\"];\r\n        })));\r\n        let sorted_year_list = year_list.sort((a:any, b:any)=>{\r\n            return a < b;\r\n        })\r\n        let data_dict:any = {};\r\n        for(let i = 0; i<filtered_results.length; i++){\r\n            let item = filtered_results[i];\r\n            let year = \"\"+item[\"Year\"];\r\n            let subgroup = item[\"Subgroup\"];\r\n            let subgroup_index = subgroup_list.indexOf(subgroup);\r\n            //console.log(\"i\", i, \"subgroup_index\", subgroup_index);\r\n            if(subgroup_index<0 || subgroup_index>=subgroup_list.length){\r\n                console.log(\"Not found subgroup. \", subgroup);\r\n                continue;\r\n            }\r\n            if(Object.keys(data_dict).indexOf(year)<0){\r\n                data_dict[year] = [];\r\n                for(let i = 0; i<subgroup_list.length; i++){\r\n                    data_dict[year].push(0);\r\n                }\r\n            }\r\n            data_dict[year][subgroup_index] = item[\"value\"];\r\n            //console.log(\"data_dict\", JSON.parse(JSON.stringify(data_dict)), \"item\", item);\r\n            \r\n        }\r\n        //console.log(\"data_dict\", data_dict, \"filtered_results\", filtered_results);\r\n        let x_axis_data = subgroup_list;\r\n        let y_series_data = [];\r\n        for(let i = 0; i<sorted_year_list.length; i++){\r\n            let local_year = sorted_year_list[i];\r\n            let local_pkg = {\r\n                name: local_year,\r\n                type: 'bar',\r\n                data: data_dict[local_year]\r\n            }\r\n            y_series_data.push(local_pkg);\r\n        }\r\n        /// Construct data\r\n        // {\"x_axis_data\", \"y_series_data\"}\r\n        let return_obj = {\r\n            \"x_axis_data\": x_axis_data,\r\n            \"y_series_data\": y_series_data\r\n        }\r\n        if(x_axis_data.length == 0 || y_series_data.length == 0){\r\n            return {};\r\n        } \r\n        return return_obj;\r\n    }else{\r\n        return {};\r\n    }\r\n}\r\nfunction convert_package_to_graph(pkg:any){\r\n    let decimal = getDecimal();\r\n    let flag = assert_key(pkg, [\"year\",\"value\"]);\r\n    if(!flag){\r\n        return {};\r\n    }\r\n    let yearlist = pkg[\"year\"];\r\n    let valuelist = pkg[\"value\"];\r\n    let nodes:any = [];\r\n    let links:any = [];\r\n\r\n    for(let i = 0; i<yearlist.length; i++){\r\n        let year = yearlist[i];\r\n        let value = valuelist[i];\r\n        let year_array = year.split(\"->\");\r\n        if(year_array.length!=2)continue;\r\n        year_array.forEach((d:any)=>{\r\n            if(nodes.indexOf(d)>=0){\r\n                \r\n            }else{\r\n                nodes.push(d);\r\n            }\r\n        })\r\n        links.push({\r\n            \"source\": year_array[0],\r\n            \"target\": year_array[1],\r\n            \"value\": value.toFixed(decimal),\r\n            \"label\": {\r\n                \"show\": true,\r\n                \"formatter\": (d:any)=>d[\"value\"]\r\n              },\r\n            \"lineStyle\":{\r\n                \"width\": 6,\r\n                \"color\": getLineColor(value)\r\n            }\r\n        })\r\n    }\r\n    nodes.sort((a:any,b:any)=>{\r\n        return a<b;\r\n    })\r\n    let new_nodes:any = [];\r\n    let nodes_length = nodes.length;\r\n    if(nodes.length <= 0){\r\n        return {};\r\n    }\r\n    let start_angle = -90;\r\n    let step_angle = 360 / nodes_length;\r\n    let radius = 10;\r\n    for(let i = 0; i<nodes_length;i++){\r\n        let x = radius * Math.cos(start_angle / 180 * Math.PI);\r\n        let y = radius * Math.sin(start_angle / 180 * Math.PI);\r\n        new_nodes.push({\r\n            \"name\": nodes[i],\r\n            \"x\": x,\r\n            \"y\": y,\r\n            \"itemStyle\": {\r\n                color: \"#5470C6\"\r\n              }\r\n        })\r\n        start_angle = start_angle + step_angle;\r\n    }\r\n    return {\r\n        \"nodes\": new_nodes,\r\n        \"links\": links\r\n    }\r\n}\r\nfunction extract_pcp_data_from_package(explore_meta_data:any, selected_dataset_name:any, selected_api_name:any){\r\n    if(assert_key(explore_meta_data, [selected_dataset_name])){\r\n        let dataset_pkg = explore_meta_data[selected_dataset_name];\r\n        let year_list = Object.keys(dataset_pkg);\r\n        let axis_spec = year_list.map((d:any, index:any)=>{\r\n            return {\r\n                \"dim\": index, \r\n                \"name\": d\r\n            }\r\n        })\r\n        let series_data = [];\r\n        let reverted_pkg:any = {};\r\n        let temp_series_data = [];\r\n        for(let i = 0; i<year_list.length; i++){\r\n            let specific_year = year_list[i];\r\n            if(!assert_key(dataset_pkg, [specific_year])){\r\n                continue;\r\n            }\r\n            for(let j = 0; j<dataset_pkg[specific_year].length; j++){\r\n                let item = dataset_pkg[specific_year][j];\r\n                let item_spec = [\r\n                    {\"n\": \"selected_id\"}, \r\n                    {\"n\":selected_api_name, \r\n                    \"c\":[\r\n                        {\"n\":\"Confidence\"}\r\n                    ]}\r\n                ];\r\n                let flag1 = assert_key_hier(item, item_spec);\r\n                if(flag1){\r\n                    let selected_id = item[\"selected_id\"];\r\n                    let confidence = item[selected_api_name][\"Confidence\"];\r\n                    let temp_data_pkg = {\r\n                        \"selected_id\": selected_id,\r\n                        \"confidence\": confidence,\r\n                        \"year\": specific_year\r\n                    }\r\n                    temp_series_data.push(temp_data_pkg);\r\n                }\r\n            }\r\n        }\r\n        temp_series_data.forEach((d:any)=>{\r\n            reverted_pkg[d[\"selected_id\"]] = {}\r\n        })\r\n        temp_series_data.forEach((d:any)=>{\r\n            reverted_pkg[d[\"selected_id\"]][d[\"year\"]] = d[\"confidence\"]\r\n        })\r\n\r\n\r\n        let item_list = Object.keys(reverted_pkg);\r\n        for(let i = 0; i<item_list.length; i++){\r\n            let item_key = item_list[i];\r\n            let data_pkg = reverted_pkg[item_key];\r\n            let new_data_pkg = [];\r\n            if(assert_key(data_pkg, year_list)){\r\n                for(let j = 0; j<year_list.length; j++){\r\n                    let specific_year = year_list[j];\r\n                    new_data_pkg.push(data_pkg[specific_year]);\r\n                }\r\n                series_data.push(new_data_pkg);\r\n            }\r\n\r\n        }\r\n        if(axis_spec.length > 0 && series_data.length > 0){\r\n            return {\r\n                \"axis_spec\": axis_spec,\r\n                \"series_data\": series_data\r\n            }\r\n        }else{\r\n            return {};\r\n        }\r\n    }else{\r\n        return {};\r\n    }\r\n}\r\nfunction remove_duplicate_elements(a:any){\r\n    var l = new Set(a);\r\n    return Array.from(l);\r\n}   \r\nfunction calculate_mean_of_array(arr:any){\r\n    if(arr.length>0){\r\n        var sum = 0;\r\n        arr.forEach((num:any) => { sum += num });\r\n        let average:any = sum / arr.length;\r\n        return average;\r\n    }else{\r\n        return 0;\r\n    }\r\n    \r\n}\r\nfunction extract_ps_data_from_package(explore_meta_data:any, selected_dataset_name:any, selected_api_name:any, selected_task_name:any){\r\n    if(assert_key(explore_meta_data, [selected_dataset_name])){\r\n        let ps_name = \"PS_\"+selected_api_name+\"_\"+selected_dataset_name;\r\n        let dataset_pkg = explore_meta_data[selected_dataset_name];\r\n        let year_list = Object.keys(dataset_pkg);\r\n        let axis_spec = year_list.map((d:any, index:any)=>{\r\n            return {\r\n                \"dim\": index, \r\n                \"name\": d\r\n            }\r\n        })\r\n        let series_data = [];\r\n        let reverted_pkg:any = {};\r\n        let temp_series_data = [];\r\n        for(let i = 0; i<year_list.length; i++){\r\n            let specific_year = year_list[i];\r\n            if(!assert_key(dataset_pkg, [specific_year])){\r\n                continue;\r\n            }\r\n            for(let j = 0; j<dataset_pkg[specific_year].length; j++){\r\n                let item = dataset_pkg[specific_year][j];\r\n                let item_spec = [\r\n                    {\"n\": \"selected_id\"}, \r\n                    {\"n\":selected_api_name, \r\n                    \"c\":[\r\n                        {\"n\":\"Confidence\"},\r\n                        {\"n\":\"TrueLabel\"},\r\n                        {\"n\":\"ImageName\"},\r\n                        {\"n\":\"OriginalPredictedLabel\"}\r\n                    ]}\r\n                ];\r\n                let flag1 = assert_key_hier(item, item_spec);\r\n                if(flag1){\r\n                    let selected_id = item[\"selected_id\"];\r\n                    let confidence = item[selected_api_name][\"Confidence\"];\r\n                    let predicted_label_list:any = [];\r\n                    let true_label = \"\";\r\n                    if(selected_task_name == \"Image Tagging\"){\r\n                        let true_label_list = item[selected_api_name][\"TrueLabel\"].map((d:any)=>{\r\n                            if(assert_key(d, [\"transcription\"])){\r\n                                return d[\"transcription\"]\r\n                            }else{\r\n                                return \"\";\r\n                            }\r\n                        });\r\n                        let unique_true_label_list = remove_duplicate_elements(true_label_list);\r\n                        true_label = unique_true_label_list.join(\", \")\r\n                        predicted_label_list = item[selected_api_name][\"OriginalPredictedLabel\"].filter((d:any)=>{\r\n                            if(assert_key(d, [\"transcription\", \"confidence\"])){\r\n                                return true;\r\n                            }else{\r\n                                return false;\r\n                            }\r\n                        }).sort((a:any, b:any)=>{\r\n                            return b[\"confidence\"] - a[\"confidence\"]; \r\n                        })\r\n                    }else{\r\n                        true_label = item[selected_api_name][\"TrueLabel\"];\r\n                        predicted_label_list = [{\r\n                            \"transcription\": item[selected_api_name][\"OriginalPredictedLabel\"],\r\n                            \"confidence\": parseFloat(confidence)\r\n                        }];\r\n                    }\r\n                    \r\n                    \r\n                    let image_name = item[selected_api_name][\"ImageName\"];\r\n                    \r\n\r\n                    let temp_data_pkg = {\r\n                        \"selected_id\": selected_id,\r\n                        \"confidence\": confidence,\r\n                        \"year\": specific_year,\r\n                        \"image_name\": image_name,\r\n                        \"true_label\": true_label,\r\n                        \"predicted_label_list\": predicted_label_list\r\n                    }\r\n                    temp_series_data.push(temp_data_pkg);\r\n                }\r\n            }\r\n        }\r\n        temp_series_data.forEach((d:any)=>{\r\n            reverted_pkg[d[\"selected_id\"]] = {}\r\n        })\r\n        temp_series_data.forEach((d:any)=>{\r\n            reverted_pkg[d[\"selected_id\"]][d[\"year\"]] = parseFloat(d[\"confidence\"]);\r\n            reverted_pkg[d[\"selected_id\"]][\"others\"] = d; // Overlapping!\r\n            reverted_pkg[d[\"selected_id\"]][\"others_\"+d[\"year\"]] = d; \r\n        })\r\n\r\n\r\n        let item_list = Object.keys(reverted_pkg);\r\n        for(let i = 0; i<item_list.length; i++){\r\n            let item_key = item_list[i];\r\n            let data_pkg = reverted_pkg[item_key];\r\n            let new_data_pkg:any = {};\r\n            if(assert_key(data_pkg, year_list)){\r\n                // Additional Attributes\r\n                new_data_pkg[\"image_name\"] = data_pkg[\"others\"][\"image_name\"];\r\n                new_data_pkg[\"true_label\"] = data_pkg[\"others\"][\"true_label\"];\r\n                for(let j = 0; j<year_list.length; j++){\r\n                    let specific_year = year_list[j];\r\n                    new_data_pkg[specific_year] = data_pkg[specific_year];\r\n                    new_data_pkg[\"Number_\"+specific_year] = data_pkg[specific_year];\r\n                    //new_data_pkg.push(data_pkg[specific_year]);\r\n                    new_data_pkg[\"predicted_label_list_\"+specific_year] = data_pkg[\"others_\"+specific_year][\"predicted_label_list\"];\r\n\r\n                }\r\n                series_data.push(new_data_pkg);\r\n            }\r\n        }\r\n        // Convert continuous variable to discrete variable.\r\n        let Confidence_list: any = [];\r\n        let Confidence_range_list:any = [];\r\n        for(let i = 0; i<year_list.length;i++){\r\n            Confidence_list.push([]);\r\n            Confidence_range_list.push([]);\r\n        }\r\n\r\n        for(let i = 0; i<series_data.length;i++){\r\n            let data_json = series_data[i];\r\n            for(let j = 0 ;j<year_list.length;j++){\r\n                let local_year = year_list[j];\r\n                Confidence_list[j].push(data_json[local_year])\r\n            }\r\n        }\r\n\r\n        // Individual confidence range\r\n        /*\r\n        for(let i = 0; i<Confidence_list.length; i++){\r\n            Confidence_range_list[i] = binningContinuousVariable(Confidence_list[i]);\r\n        }\r\n        for(let i = 0; i<series_data.length;i++){\r\n            let data_json = series_data[i];\r\n            for(let j = 0; j<year_list.length; j++){\r\n                let local_year = year_list[j];\r\n                data_json[local_year] = getContinuousVariableCategory(data_json[local_year], Confidence_range_list[j]);\r\n            }\r\n        }\r\n        */\r\n\r\n        // Combined confidence range\r\n        /*\r\n        let total_Confidence_list:any = [];\r\n        for(let i = 0; i<Confidence_list.length; i++){\r\n            total_Confidence_list = total_Confidence_list.concat(Confidence_list[i])\r\n        }\r\n        let total_confidence_range = binningContinuousVariable(total_Confidence_list);\r\n\r\n        for(let i = 0; i<Confidence_list.length; i++){\r\n            Confidence_range_list[i] = total_confidence_range\r\n        }\r\n        for(let i = 0; i<series_data.length;i++){\r\n            let data_json = series_data[i];\r\n            for(let j = 0; j<year_list.length; j++){\r\n                let local_year = year_list[j];\r\n                data_json[local_year] = getContinuousVariableCategory(data_json[local_year], Confidence_range_list[j]);\r\n            }\r\n        }*/\r\n\r\n        // Specificed range list:\r\n        let total_confidence_range = [\r\n            {\"start\": 0, \"end\": 0.2, \"name\":\"[0,0.2]\"},\r\n            {\"start\": 0.2, \"end\": 0.4, \"name\":\"[0.2,0.4]\"},\r\n            {\"start\": 0.4, \"end\": 0.6, \"name\":\"[0.4,0.6]\"},\r\n            {\"start\": 0.6, \"end\": 0.8, \"name\":\"[0.6,0.8]\"},\r\n            {\"start\": 0.8, \"end\": 1, \"name\":\"[0.8,1]\"},\r\n        ];\r\n        for(let i = 0; i<Confidence_list.length; i++){\r\n            Confidence_range_list[i] = total_confidence_range\r\n        }\r\n        let year_name_dict:any = {};\r\n        \r\n        let reversed_name_mapping:any = {}\r\n        year_list.forEach((d:any, index:any)=>{\r\n            let avg_conf = calculate_mean_of_array(Confidence_list[index]);\r\n            let new_key = \"\" + d + \" Average Confidence: \"+avg_conf.toFixed(2);\r\n            year_name_dict[d] = new_key\r\n            reversed_name_mapping[new_key] = d;\r\n        })\r\n        let get_year_name = (year:any) => {\r\n            return year_name_dict[year];\r\n        }\r\n        for(let i = 0; i<series_data.length;i++){\r\n            let data_json = series_data[i];\r\n            for(let j = 0; j<year_list.length; j++){\r\n                let local_year = year_list[j];\r\n                let year_name = get_year_name(local_year)\r\n                data_json[local_year] = getContinuousVariableCategory(data_json[local_year], Confidence_range_list[j]);\r\n                data_json[year_name] = data_json[local_year];\r\n            }\r\n        }\r\n\r\n        let dimension_names:any = year_list.map((d:any)=>{\r\n            return get_year_name(d);\r\n        })\r\n        console.log(\"series_data\", series_data, Confidence_list, Confidence_range_list)\r\n        if(axis_spec.length > 0 && series_data.length > 0){\r\n            return {\r\n                \"PSDimensions\": dimension_names,\r\n                \"ReversedDimMapping\": reversed_name_mapping,\r\n                \"PSJson\": {\r\n                    \"PSData\": series_data, \r\n                    \"name\": ps_name\r\n                }\r\n            }\r\n        }else{\r\n            return {};\r\n        }\r\n    }else{\r\n        return {};\r\n    }\r\n}\r\nfunction filtered_data(filters:any, PSJson:any){\r\n    let data = PSJson.PSData.slice();\r\n    let filterData:any[] = [];\r\n    \r\n    let filters_key = Object.keys(filters);\r\n    const selected = (d:any)=>{\r\n        if(filters_key.length>0){\r\n            for(let i = 0; i< filters_key.length;i ++){\r\n                if(filters[filters_key[i]].indexOf(d[filters_key[i]])<0){\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n    data.forEach((d:any,index:number)=>{\r\n        if(selected(d)){\r\n            let dataInstance = d;\r\n            filterData.push(dataInstance);\r\n        }\r\n    })\r\n    return filterData;\r\n}\r\nfunction confidence_style(confidence:any, name:any, decimal:number=4){\r\n    //let arr1 = machine_cons.split(\"/\");\r\n    //let corr1 = parseInt(arr1[0]);\r\n    //let total1 = parseInt(arr1[1]);\r\n    let percentage = confidence * 100;\r\n    if(percentage<0){\r\n        percentage = 0;\r\n    }\r\n    if(percentage>100){\r\n        percentage = 100;\r\n    }\r\n    let default_color = \"#0f8CFF\";\r\n    /*return [<Col span={8}>{name}</Col>,<Col span={16}><Progress percent={percentage} size=\"small\" format={()=>confidence.toFixed(4)}\r\n    style={{\"width\":\"50%\"}} strokeColor={{\r\n        '0%': default_color,\r\n        '100%': default_color,\r\n      }} // 80px\r\n     /></Col>]*/\r\n\r\n     return <Progress percent={percentage} size=\"small\" format={()=>name+\" (\"+confidence.toFixed(decimal)+\")\"}\r\n    style={{\"width\":\"30%\"}} strokeColor={{\r\n        '0%': default_color,\r\n        '100%': default_color,\r\n      }} />\r\n     /**\r\n      * strokeColor={{\r\n        '0%': color,\r\n        '100%': color,\r\n      }}\r\n      */\r\n}\r\nfunction extract_rawdata_for_imagedisplay(ps_json:any, selected_dataset_name:any, filters:any={}){\r\n    // filters is dummy now.\r\n    // rawdata_list\r\n    let decimal = getDecimal();\r\n    let ps_package_spec = [{\r\n        \"n\":\"PSJson\",\r\n        \"c\":[{\r\n            \"n\":\"PSData\"\r\n        },{\r\n            \"n\":\"name\"\r\n        }]\r\n    },{\r\n        \"n\":\"PSDimensions\"\r\n    },{\"n\":\"ReversedDimMapping\"}]\r\n    let flag = assert_key_hier(ps_json, ps_package_spec);\r\n    if(!flag){\r\n        return [];\r\n    }\r\n    let PSData = ps_json[\"PSJson\"][\"PSData\"];\r\n    PSData = filtered_data(filters, ps_json[\"PSJson\"]);\r\n    let PSDimensions_old = ps_json[\"PSDimensions\"];\r\n    let ReversedDimMapping = ps_json[\"ReversedDimMapping\"];\r\n    let PSDimensions = PSDimensions_old.map((d:any)=>{\r\n        return ReversedDimMapping[d];\r\n    })\r\n    let rawdata_list = [];\r\n    console.log(\"PSData, \",PSData);\r\n    for(let i = 0; i<PSData.length; i++){\r\n        let item = PSData[i];\r\n        let text_list = [];\r\n        text_list.push(\"Ground Truth: \"+item[\"true_label\"]);\r\n        for(let j = 0; j<PSDimensions.length; j++){\r\n            let specific_year = PSDimensions[j];\r\n            let confidence = parseFloat(item[\"Number_\"+specific_year]).toFixed(decimal);\r\n            text_list.push(\"\"+specific_year+\" Confidence: \"+confidence);\r\n            text_list.push(\"\"+specific_year+\" Predicted Label:\");\r\n            for(let k = 0; k<item[\"predicted_label_list_\"+specific_year].length; k++){\r\n                let local_item = item[\"predicted_label_list_\"+specific_year][k];\r\n                text_list.push(confidence_style(local_item[\"confidence\"], local_item[\"transcription\"], decimal) );\r\n                //text_list.push(\"\"+local_item[\"transcription\"]+\" : \"+local_item[\"confidence\"].toFixed(4));\r\n            }\r\n        }        \r\n        let alt = item[\"image_name\"];\r\n\r\n        let src = getRawDataURL(selected_dataset_name, item[\"image_name\"]);\r\n        rawdata_list.push({\r\n            \"src\": src,\r\n            \"alt\": alt,\r\n            \"text_list\": text_list\r\n        })\r\n    }\r\n    return rawdata_list;\r\n\r\n}\r\n\r\nexport {extract_dataset_list,\r\n    extract_api_list,\r\n    extract_task_list,\r\n    extract_explore_dataset_list,\r\n    extract_value_from_data,\r\n    extract_fairness_from_data,\r\n    convert_package_to_graph,\r\n    extract_ps_data_from_package,\r\n    extract_rawdata_for_imagedisplay\r\n}","import * as React from 'react';\r\nimport { Select, Row, Col, Checkbox, Divider,  } from 'antd';\r\nimport { getDatasetList, getData, getExploreMetaData, getRawData } from '../../../service/dataService';\r\nimport { assert_key_hier, assert_key, arraysEqual, setsAreEqual, get_mode_options,\r\n    safe_extract_item_from_list, safe_extract_items_from_list } from '../../../helper';\r\nimport { extract_dataset_list, extract_api_list, \r\n    extract_task_list, extract_explore_dataset_list } from '../../../helper/preprocessor';\r\nconst Option = Select.Option;\r\n\r\nexport interface DataSelectorProps {\r\n    dataset_id : number | null,  // dataset id\r\n    api_id : number | null,  // dummy item\r\n    api_id_list: any, \r\n    mode_id: number,\r\n    task_id: number | null,\r\n    datasetList: any,   // dataset list\r\n    changeDataset: any,  // change dataset\r\n    changeAPI: any,     // dummy item\r\n    changeAPIList:any, \r\n    changeTask:any, \r\n    changeMode:any, \r\n    clearIdInfo:any,    // clear id info\r\n    initDatasetList: any,  // initialize dataset list\r\n    initData: any,\r\n    initExploreMetaData: any,\r\n    data:any,\r\n    explore_meta_data:any,\r\n    width: any\r\n}\r\n\r\nexport interface DataSelectorState {\r\n    selectState: boolean\r\n}\r\n\r\nexport default class DataSelector extends React.Component<DataSelectorProps, DataSelectorState> {\r\n    constructor(props: DataSelectorProps) {\r\n        super(props);\r\n        this.onDatasetSelectorChange = this.onDatasetSelectorChange.bind(this);\r\n        this.onAPISelectorChange = this.onAPISelectorChange.bind(this);\r\n        this.onAPIListSelectorChange = this.onAPIListSelectorChange.bind(this);\r\n        this.onTaskSelectorChange = this.onTaskSelectorChange.bind(this);\r\n        this.onModeSelectorChange = this.onModeSelectorChange.bind(this);\r\n        this.state = {\r\n            selectState: false\r\n        };\r\n    }\r\n    // Initialize Dataset List.\r\n    componentDidMount(){\r\n        this.initData();\r\n        this.initExploreMetaData();\r\n    }\r\n    public async initExploreMetaData(){\r\n        const data_package = await getExploreMetaData();\r\n\r\n        if(data_package[\"success\"] === true){\r\n            let data_package_spec = [{\r\n                \"n\": \"data\",\r\n                \"c\":[\r\n                    {\"n\": \"DatasetNames\"}\r\n                ]\r\n            }];\r\n            let flag = assert_key_hier(data_package, data_package_spec, true, \"data_package\");\r\n            if(flag){\r\n                console.log(\"explore meta package\", data_package);\r\n                this.props.initExploreMetaData(data_package[\"data\"]);\r\n                // this.props.initDatasetList(data_package[\"datasets\"][\"DatasetsList\"]);\r\n            }\r\n        }\r\n        \r\n    }\r\n    public async initData(){\r\n        const data_package = await getData();\r\n        /*const explore_package = await getExploreMetaData();\r\n        const img_package = await getRawData();\r\n        console.log(\"explore_package\", explore_package);\r\n        console.log(\"img_package\", img_package);*/\r\n        //console.log(datasetList_package);\r\n        if(data_package[\"success\"] === true){\r\n            let data_package_spec = [{\r\n                \"n\": \"data\",\r\n                \"c\":[\r\n                    {\"n\": \"TaskNames\"}\r\n                ]\r\n            }];\r\n            let flag = assert_key_hier(data_package, data_package_spec, true, \"data_package\");\r\n            if(flag){\r\n                console.log(\"data package\", data_package);\r\n                this.props.initData(data_package[\"data\"]);\r\n                // this.props.initDatasetList(data_package[\"datasets\"][\"DatasetsList\"]);\r\n            }\r\n        }\r\n        \r\n    }\r\n    public async initDatasetList(){\r\n        const datasetList_package = await getDatasetList();\r\n        //console.log(datasetList_package);\r\n        if(datasetList_package[\"success\"] === true){\r\n            let datasetList_package_spec = [{\r\n                \"n\": \"datasets\",\r\n                \"c\": [{\r\n                    \"n\": \"DatasetsList\"\r\n                }]\r\n            }];\r\n            let flag = assert_key_hier(datasetList_package, datasetList_package_spec, true, \"datasetList_package\");\r\n            if(flag){\r\n                this.props.initDatasetList(datasetList_package[\"datasets\"][\"DatasetsList\"]);\r\n            }\r\n        }\r\n        \r\n    }\r\n    // Handling the event of changing data selector. \r\n    public onTaskSelectorChange(value: number) {\r\n        this.props.changeTask(value);\r\n        this.props.clearIdInfo();\r\n    }\r\n    // Handling the event of changing data selector. \r\n    public onDatasetSelectorChange(value: number) {\r\n        this.props.changeDataset(value);\r\n        //this.props.clearIdInfo();\r\n    }\r\n    // Handling the event of changing data selector. \r\n    public onAPISelectorChange(value: number) {\r\n        this.props.changeAPI(value);\r\n        //this.props.clearIdInfo();\r\n    }\r\n    // Handling the event of changing data selector. \r\n    public onAPIListSelectorChange(value: any) {\r\n        this.props.changeAPIList(value);\r\n        //this.props.clearIdInfo();\r\n    }\r\n    public onModeSelectorChange(value: any) {\r\n        this.props.changeMode(value);\r\n        //this.props.clearIdInfo();\r\n    }\r\n    \r\n    public render() {        \r\n        console.log(\"api_id_list\", this.props.api_id_list);\r\n        let {data, task_id, dataset_id, explore_meta_data} = this.props;\r\n        let task_list = extract_task_list(data);\r\n        let dataset_list = extract_dataset_list(data, task_id);\r\n        let api_list = extract_api_list(data, task_id);\r\n        let mode_options_list = get_mode_options();\r\n        let disabledAPISelector = api_list.length <= 0;\r\n        let disabledDatasetSelector = dataset_list.length <= 0;\r\n        let disabledTaskSelector = task_list.length <= 0;\r\n        let disabledModeSelector = mode_options_list.length <= 0;\r\n        let visibleModeSelector = false;\r\n        let explore_meta_dataset_list = extract_explore_dataset_list(explore_meta_data);\r\n        let selected_dataset_name = safe_extract_item_from_list(dataset_id, dataset_list);\r\n        if(explore_meta_dataset_list.indexOf(selected_dataset_name)>=0){\r\n            visibleModeSelector = true;\r\n        }else{\r\n            //disabledModeSelector = true;\r\n            /*if(this.props.mode_id != 1){\r\n                this.onModeSelectorChange(1);\r\n            }*/\r\n        }\r\n        \r\n        console.log(\"visible\", visibleModeSelector, explore_meta_dataset_list, selected_dataset_name);\r\n        let all_api_id_list:any = api_list.map((d:any, index:any)=>index+1);\r\n        let select_all_state = setsAreEqual(new Set(all_api_id_list), new Set(this.props.api_id_list));\r\n        let generateTaskSelector = (col_size:number) => {\r\n            return <Col span={col_size}>\r\n                    <Row>\r\n                    Task:&nbsp;\r\n                    </Row>\r\n                    <Row>\r\n                    <Select\r\n                        //size={\"small\"}\r\n                        placeholder=\"Select a Task\"\r\n                        value={this.props.task_id  || undefined}\r\n                        style={{ width: '95%'}}\r\n                        onChange={this.onTaskSelectorChange}\r\n                        disabled={disabledTaskSelector}\r\n                    >\r\n                        {task_list.map((d:any, index:any)=>(\r\n                            <Option value={index+1} key={index+1}>\r\n                                {d}\r\n                            </Option>\r\n                        ))}\r\n                    </Select>\r\n                    </Row>\r\n                </Col>\r\n        }\r\n        let generateAPISelector = (col_size:number) => {\r\n            return <Col span={col_size}>\r\n                    <Row>\r\n                    API:&nbsp;\r\n                    </Row>\r\n                    <Row>\r\n                    <Select\r\n                        //size={\"small\"}\r\n                        mode={\"multiple\"}\r\n                        allowClear\r\n                        placeholder=\"Select APIs\"\r\n                        value={this.props.api_id_list}\r\n                        style={{ width: '95%'}}\r\n                        onChange={this.onAPIListSelectorChange}\r\n                        disabled={disabledAPISelector}\r\n                        dropdownRender={allSelectValue => (\r\n                            <div>\r\n                            <div style={{ padding: '4px 8px 8px 8px', cursor: 'pointer' }}>\r\n                                <Checkbox checked={select_all_state} onChange={(e) => {\r\n                                // 判断 是否 选中\r\n                                if(e.target.checked === true){\r\n                                    this.onAPIListSelectorChange(all_api_id_list);\r\n                                }else{\r\n                                    this.onAPIListSelectorChange([]);\r\n                                }\r\n                                }}>All</Checkbox>\r\n                            </div>\r\n                            <Divider style={{margin:'0'}}/>\r\n                            {/* Option 标签值 */}\r\n                            {allSelectValue}\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {api_list.map((d:any, index:any)=>(\r\n                            <Option value={index+1} key={index+1}>\r\n                                {d}\r\n                            </Option>\r\n                        ))}\r\n                    </Select>\r\n                    </Row>\r\n                </Col>\r\n        }\r\n        let generateDatasetSelector = (col_size:number) => {\r\n            return <Col span={col_size}>\r\n                        <Row>\r\n                        Dataset:&nbsp;\r\n                        </Row>\r\n                        <Row>\r\n                        <Select\r\n                            //size={\"small\"}\r\n                            placeholder=\"Select a dataset\"\r\n                            value={this.props.dataset_id  || undefined}\r\n                            style={{ width: '95%'}}\r\n                            onChange={this.onDatasetSelectorChange}\r\n                            disabled={disabledDatasetSelector}\r\n                            \r\n                            >\r\n                            {dataset_list.map((d:any, index:any)=>(\r\n                                <Option value={index+1} key={index+1}>\r\n                                    {d}\r\n                                </Option>\r\n                            ))}\r\n                        </Select>\r\n                        </Row>\r\n                    </Col>\r\n        }\r\n        let generateModeSelector = (col_size:number, visible: boolean)=>{\r\n            //if(visible){\r\n                return <Col span={col_size}>\r\n                    <Row>\r\n                    Mode:&nbsp;\r\n                    </Row>\r\n                    <Row>\r\n                    <Select\r\n                        //size={\"small\"}\r\n                        placeholder=\"Select a mode\"\r\n                        value={this.props.mode_id}\r\n                        style={{ width: '95%'}}\r\n                        onChange={this.onModeSelectorChange}\r\n                        disabled={disabledModeSelector}\r\n                        \r\n                        >\r\n                        {mode_options_list.map((d:any, index:any)=>(\r\n                            <Option value={index+1} key={index+1}>\r\n                                {d}\r\n                            </Option>\r\n                        ))}\r\n                    </Select>\r\n                    </Row>\r\n                </Col>\r\n            /*}else{\r\n                return <div />\r\n            }*/\r\n        }\r\n        \r\n\r\n        let generate_horizontal_layout = () => {\r\n            let col_size = 8;\r\n            return <Row>\r\n                {generateTaskSelector(col_size)}\r\n                {generateAPISelector(col_size)}\r\n                {generateDatasetSelector(col_size)}\r\n            </Row>\r\n        }\r\n        let generate_veritical_layout = () => {\r\n            let col_size = 24;\r\n            return <Row>\r\n                <Col span={col_size}>\r\n                <Row>\r\n                {generateTaskSelector(col_size)}\r\n\r\n                </Row>\r\n                <Row>\r\n                {generateAPISelector(col_size)}\r\n                </Row>\r\n                <Row>\r\n                {generateDatasetSelector(col_size)}\r\n                </Row>\r\n                </Col>\r\n                \r\n            </Row>\r\n        }\r\n        \r\n        let breakpoint = 620;\r\n        if(this.props.width>=breakpoint){\r\n            console.log(\"horizontal width:\", this.props.width);\r\n            return generate_horizontal_layout();\r\n        }else{\r\n            return generate_veritical_layout();\r\n        }\r\n            \r\n    }\r\n}\r\n\r\n","import { DATASET_ID_CHANGE, INIT_DATASET_LIST, CLEAR_ID_INFO, \r\n    INIT_DATA, API_ID_CHANGE, TASK_ID_CHANGE, \r\n    API_ID_LIST_CHANGE, INIT_EXPLORE_META_DATA, MODE_ID_CHANGE, VIEW_MODE_CHANGE} from '../constants';\r\n\r\n// Define Change Model Methods\r\nexport const changeDataset = (dataset_id:number | null) =>({\r\n    type: DATASET_ID_CHANGE,\r\n    dataset_id: dataset_id\r\n})\r\nexport const changeAPI = (api_id:number | null) =>({\r\n    type: API_ID_CHANGE,\r\n    api_id: api_id\r\n})\r\nexport const changeAPIList = (api_id_list: any) =>({\r\n    type: API_ID_LIST_CHANGE,\r\n    api_id_list: api_id_list\r\n})\r\nexport const changeTask = (task_id:number | null) =>({\r\n    type: TASK_ID_CHANGE,\r\n    task_id: task_id\r\n})\r\nexport const changeMode = (mode_id: number) =>({\r\n    type: MODE_ID_CHANGE,\r\n    mode_id: mode_id\r\n})\r\nexport const changeViewMode = (view_mode: number) =>({\r\n    type: VIEW_MODE_CHANGE,\r\n    view_mode: view_mode\r\n})\r\nexport const clearIdInfo = () =>({\r\n    type: CLEAR_ID_INFO\r\n})\r\n\r\nexport const initDatasetList = (datasetList:any) =>({\r\n    type: INIT_DATASET_LIST,\r\n    datasetList: datasetList\r\n})\r\n\r\nexport const initData = (data:any) =>({\r\n    type: INIT_DATA,\r\n    data: data\r\n})\r\n\r\nexport const initExploreMetaData = (explore_meta_data:any) => ({\r\n    type: INIT_EXPLORE_META_DATA,\r\n    explore_meta_data: explore_meta_data\r\n})","\r\n// Define Change Model Constant\r\nexport const DATASET_ID_CHANGE = \"DATASET_ID_CHANGE\";\r\nexport type DATASET_ID_CHANGE = typeof DATASET_ID_CHANGE;\r\n\r\nexport const API_ID_CHANGE = \"API_ID_CHANGE\";\r\nexport type API_ID_CHANGE = typeof API_ID_CHANGE;\r\n\r\n\r\nexport const API_ID_LIST_CHANGE = \"API_ID_LIST_CHANGE\";\r\nexport type API_ID_LIST_CHANGE = typeof API_ID_LIST_CHANGE;\r\n\r\nexport const TASK_ID_CHANGE = \"TASK_ID_CHANGE\";\r\nexport type TASK_ID_CHANGE = typeof TASK_ID_CHANGE;\r\n\r\nexport const MODE_ID_CHANGE = \"MODE_ID_CHANGE\";\r\nexport type MODE_ID_CHANGE = typeof MODE_ID_CHANGE;\r\n\r\nexport const INIT_DATASET_LIST = \"INIT_DATASET_LIST\";\r\nexport type INIT_DATASET_LIST = typeof INIT_DATASET_LIST;\r\n\r\nexport const CLEAR_ID_INFO = \"CLEAR_ID_INFO\";\r\nexport type CLEAR_ID_INFO = typeof CLEAR_ID_INFO;\r\n\r\nexport const INIT_DATA = \"INIT_DATA\";\r\nexport type INIT_DATA = typeof INIT_DATA;\r\n\r\nexport const INIT_EXPLORE_META_DATA = \"INIT_EXPLORE_META_DATA\";\r\nexport type INIT_EXPLORE_META_DATA = typeof INIT_EXPLORE_META_DATA;\r\n\r\nexport const VIEW_MODE_CHANGE = \"VIEW_MODE_CHANGE\";\r\nexport type VIEW_MODE_CHANGE = typeof VIEW_MODE_CHANGE;","import DataSelector from '../components/DataRuns/ControlPanel/DataSelector';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeDataset,initDatasetList, \r\n    clearIdInfo, changeAPI, initData, changeTask, changeAPIList, initExploreMetaData, changeMode} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    dataset_id: state.dataset_id,\r\n    datasetList: state.datasetList,\r\n    data: state.data,\r\n    explore_meta_data: state.explore_meta_data,\r\n    api_id: state.api_id,\r\n    api_id_list: state.api_id_list,\r\n    mode_id: state.mode_id, \r\n    task_id: state.task_id,\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeTask: (task_id: number| null) => dispatch(changeTask(task_id)),\r\n    changeAPI: (api_id:number | null) => dispatch(changeAPI(api_id)),\r\n    changeMode: (mode_id: number) => dispatch(changeMode(mode_id)),\r\n    changeAPIList: (api_id_list:any) => dispatch(changeAPIList(api_id_list)),\r\n    changeDataset: (dataset_id:number | null) => dispatch(changeDataset(dataset_id)),\r\n    clearIdInfo: () => dispatch(clearIdInfo()),\r\n    initData: (data:any) => dispatch(initData(data)),\r\n    initExploreMetaData: (explore_meta_data: any) => dispatch(initExploreMetaData(explore_meta_data)),\r\n    initDatasetList : (datasetList: any) => dispatch(initDatasetList(datasetList))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataSelector);\r\n","import './index.css';\r\nimport ControlPanel from './ControlPanel';\r\nexport default ControlPanel;","import * as React from 'react';\r\nimport {Row} from 'antd';\r\nimport DataSelectorContainer from '../../../container/DataSelectorContainer';\r\nimport { ENABLE_FORCE_AUTH } from '../../../service/dataService';\r\nimport { Divider } from 'antd';\r\n\r\nexport interface ControlPanelProps {\r\n    user_verify: any,\r\n    width: any,\r\n    height: any\r\n}\r\n\r\nexport interface ControlPanelState {}\r\n\r\nexport default class ControlPanel extends React.Component<ControlPanelProps, ControlPanelState> {\r\n    constructor(props: ControlPanelProps) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        };\r\n    }\r\n    public render() {\r\n        let display_selector = false;\r\n        if(!ENABLE_FORCE_AUTH){\r\n            display_selector = true;\r\n        }else{\r\n            if(this.props.user_verify){\r\n                display_selector = true;\r\n            }\r\n        }\r\n        console.log(display_selector, this.props.user_verify, ENABLE_FORCE_AUTH);\r\n        return (\r\n            <div>\r\n            <div className=\"ViewTitle2\">Control Panel</div>\r\n            <div className=\"ViewBox\">\r\n            {(display_selector)?<DataSelectorContainer width={this.props.width} />:<div/>}\r\n            {/**\r\n             * <div style={{width: \"100%\", height:\"\"+(this.props.height - 40)+\"px\",  overflowY: \"auto\"}}>\r\n                        {(display_selector)?<DataSelectorContainer />:<div/>}\r\n                </div>\r\n             */}\r\n                \r\n                   \r\n            </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n","import ControlPanel from '../components/DataRuns/ControlPanel'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    dataset_id : state.dataset_id,\r\n    user_verify: state.user_verify\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\r\n\r\n\r\n\r\n","\r\nimport * as React from \"react\";\r\nimport {Row } from 'antd';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { assert_key } from \"../../../helper\";\r\n\r\nexport interface IProps {\r\n    acc_package:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class AccuracyChart extends React.Component<IProps, IState>{\r\n    public refresh_number: any = 1;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.renderAccuracyChart = this.renderAccuracyChart.bind(this);\r\n        this.state = {\r\n        }\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    public renderAccuracyChart = (acc_package_dict:any) => {\r\n      // acc_package: year(x), acc(y)\r\n      let selected_api_list = Object.keys(acc_package_dict);\r\n      let x_axis_data:any = [];\r\n      let y_series_data:any = [];\r\n      let whole_value_min = 1;\r\n      let whole_value_max = 0;\r\n      let enable_accuracy_chart = true;\r\n      this.refresh_number = this.refresh_number + 1;\r\n      for(let i = 0; i<selected_api_list.length; i++){\r\n        let selected_api = selected_api_list[i];\r\n        let acc_package = acc_package_dict[selected_api];\r\n        let flag = assert_key(acc_package, [\"year\",\"value\"]);\r\n        if(!flag){\r\n          enable_accuracy_chart = false;\r\n          break;\r\n        }\r\n        if(i == 0){\r\n          x_axis_data = acc_package[\"year\"];\r\n        }\r\n        let value_min = Math.min(...acc_package[\"value\"]);\r\n        let value_max = Math.max(...acc_package[\"value\"]);\r\n        \r\n        whole_value_min = Math.min(value_min, whole_value_min);\r\n        whole_value_max = Math.max(value_max, whole_value_max);\r\n\r\n        let single_data_package = {\r\n          \"data\": acc_package[\"value\"],\r\n          \"type\": \"line\",\r\n          \"name\": selected_api\r\n        }\r\n        y_series_data.push(single_data_package)\r\n      }\r\n      console.log(\"y_series_data\", y_series_data);\r\n      whole_value_max = Math.floor((parseFloat(whole_value_max.toFixed(2))+0.01)*100)/100;\r\n      whole_value_min =Math.floor((parseFloat(whole_value_min.toFixed(2))-0.01)*100)/100;\r\n      if(whole_value_max<whole_value_min) whole_value_max = whole_value_min;\r\n      let accuracy_chart_option = {};\r\n      \r\n      \r\n            \r\n      if(enable_accuracy_chart){\r\n          \r\n          \r\n\r\n          accuracy_chart_option = {\r\n              title: {\r\n                 // text: 'Accuracy'\r\n                },\r\n                tooltip: {\r\n                  formatter: function (params:any) {\r\n                    //console.log(\"tooltip\", params);\r\n                    return params[\"marker\"] + params[\"name\"] + \"&nbsp;&nbsp;&nbsp;&nbsp;<strong>\"+ params[\"data\"].toFixed(3)+\"</strong>\";\r\n                  }\r\n                },\r\n                grid:{\r\n                  \"left\": \"50\",\r\n                  \"right\": \"50\"\r\n                },\r\n\r\n                \r\n                legend: {\r\n                  right: '50',\r\n                  \r\n                },\r\n              xAxis: {\r\n                type: 'category',\r\n                boundaryGap: false,\r\n                data: x_axis_data,\r\n                \r\n              },\r\n              yAxis: {\r\n                type: 'value',\r\n                min: whole_value_min,\r\n                max: whole_value_max\r\n              },\r\n              series: y_series_data,\r\n              notMerge: true\r\n            };     \r\n          return <ReactECharts key={this.refresh_number} option={accuracy_chart_option} />\r\n      }else{\r\n          return <div />\r\n      }\r\n  }\r\n    public renderAccuracyChart_SinglePackage = (acc_package:any) => {\r\n        // acc_package: year(x), acc(y)\r\n        let flag = assert_key(acc_package, [\"year\",\"value\"]);\r\n        let enable_accuracy_chart = flag;\r\n        let accuracy_chart_option = {};\r\n        \r\n        \r\n              \r\n        if(enable_accuracy_chart){\r\n            \r\n            let value_min = Math.min(...acc_package[\"value\"]);\r\n            let value_max = Math.max(...acc_package[\"value\"]);\r\n            value_max = parseFloat(value_max.toFixed(2))+0.01;\r\n            value_min = parseFloat(value_min.toFixed(2))-0.01;\r\n            if(value_max<value_min) value_max = value_min;\r\n\r\n            accuracy_chart_option = {\r\n                title: {\r\n                    text: 'Accuracy'\r\n                  },\r\n                  tooltip: {},\r\n                xAxis: {\r\n                  type: 'category',\r\n                  boundaryGap: false,\r\n                  data: acc_package[\"year\"],\r\n                  \r\n                },\r\n                yAxis: {\r\n                  type: 'value',\r\n                  min: value_min,\r\n                  max: value_max\r\n                },\r\n                series: [\r\n                  {\r\n                    data: acc_package[\"value\"],\r\n                    type: 'line'\r\n                  }\r\n                ]\r\n              };     \r\n            return <ReactECharts option={accuracy_chart_option} />\r\n        }else{\r\n            return <div />\r\n        }\r\n    }\r\n    \r\n\r\n    public render() {\r\n\r\n        return this.renderAccuracyChart(this.props.acc_package);\r\n    }\r\n}","\r\nimport * as React from \"react\";\r\nimport {Row } from 'antd';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { assert_key, getDecimal, getLineColor, getLineColorMap } from \"../../../helper\";\r\n\r\nexport interface IProps {\r\n  consistency_package:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ConsistencyChart extends React.Component<IProps, IState>{\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.renderConsistencyChart = this.renderConsistencyChart.bind(this);\r\n        this.state = {\r\n        }\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n\r\n    public renderConsistencyChart = (consistency_package:any) => {\r\n      let flag = assert_key(consistency_package, [\"nodes\",\"links\"]);\r\n      console.log(consistency_package);\r\n        let enable_consistency_chart = flag;\r\n        let consistency_chart_option = {};\r\n        let decimal = getDecimal();\r\n              \r\n        if(enable_consistency_chart){\r\n          \r\n          consistency_chart_option =  {\r\n          title: {\r\n            //text: 'Consistency'\r\n          },\r\n          tooltip: {},\r\n          animationDurationUpdate: 1500,\r\n          animationEasingUpdate: 'quinticInOut',\r\n          visualMap: {\r\n            min: 0,\r\n            max: 1,\r\n            type: 'continuous',\r\n            calculable: false,\r\n            text: [\"1\", \"0\"],\r\n            precision: decimal,\r\n            inRange: {\r\n              color: getLineColorMap()\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              type: 'graph',\r\n              layout: 'none',\r\n              symbolSize: 50,\r\n              roam: true,\r\n              label: {\r\n                show: true\r\n              },\r\n              edgeSymbol: ['circle'],\r\n              edgeSymbolSize: [4, 10],\r\n              edgeLabel: {\r\n                fontSize: 20\r\n              },\r\n              \r\n              data: consistency_package[\"nodes\"],\r\n              // links: [],\r\n              links: consistency_package[\"links\"],\r\n              lineStyle: {\r\n                opacity: 1,\r\n                width: 5,\r\n                curveness: 0\r\n              }\r\n            }\r\n          ],\r\n          \r\n        };     \r\n            return <ReactECharts option={consistency_chart_option} />\r\n        }else{\r\n            return <div />\r\n        }\r\n    }\r\n    \r\n\r\n    public render() {\r\n\r\n        return this.renderConsistencyChart(this.props.consistency_package);\r\n    }\r\n}","\r\nimport * as React from \"react\";\r\nimport {Row } from 'antd';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { assert_key, getDecimal, getLineColorMap } from \"../../../helper\";\r\n\r\nexport interface IProps {\r\n  confidence_package: any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ConfidenceChart extends React.Component<IProps, IState>{\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.renderConfidenceChart = this.renderConfidenceChart.bind(this);\r\n        this.state = {\r\n        }\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n\r\n    public renderConfidenceChart = (confidence_package:any) => {\r\n      let flag = assert_key(confidence_package, [\"nodes\",\"links\"]);\r\n\r\n        let enable_confidence_chart = flag;\r\n        let confidence_chart_option = {};\r\n        let decimal = getDecimal();\r\n              \r\n        if(enable_confidence_chart){\r\n          \r\n        confidence_chart_option =  {\r\n          title: {\r\n            //text: 'Confidence'\r\n          },\r\n          tooltip: {},\r\n          animationDurationUpdate: 1500,\r\n          animationEasingUpdate: 'quinticInOut',\r\n          visualMap: {\r\n            min: 0,\r\n            max: 1,\r\n            type: 'continuous',\r\n            calculable: false,\r\n            text: [\"1\", \"0\"],\r\n            precision: decimal,\r\n            inRange: {\r\n              color: getLineColorMap()\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              type: 'graph',\r\n              layout: 'none',\r\n              symbolSize: 50,\r\n              roam: true,\r\n              label: {\r\n                show: true\r\n              },\r\n              edgeSymbol: ['circle'],\r\n              edgeSymbolSize: [4, 10],\r\n              edgeLabel: {\r\n                fontSize: 20\r\n              },\r\n              data: confidence_package[\"nodes\"],\r\n              // links: [],\r\n              links: confidence_package[\"links\"],\r\n              lineStyle: {\r\n                opacity: 0.9,\r\n                width: 2,\r\n                curveness: 0\r\n              }\r\n            }\r\n          ]\r\n        };     \r\n            return <ReactECharts option={confidence_chart_option} />\r\n        }else{\r\n            return <div />\r\n        }\r\n    }\r\n    \r\n\r\n    public render() {\r\n\r\n        return this.renderConfidenceChart(this.props.confidence_package);\r\n    }\r\n}","\r\nimport * as React from \"react\";\r\nimport {Row } from 'antd';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { assert_key } from \"../../../helper\";\r\n\r\nexport interface IProps {\r\n  fairness_package:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class FairnessChart extends React.Component<IProps, IState>{\r\n    public refresh_number: any = 1;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.renderFairnessChart = this.renderFairnessChart.bind(this);\r\n        this.state = {\r\n        }\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    public renderFairnessChart = (fairness_package_dict:any) => {\r\n      let flag = assert_key(fairness_package_dict, [\"x_axis_data\", \"y_series_data\"]);\r\n      let enable_fairness_chart = flag;\r\n      let fairness_chart_option = {};\r\n      this.refresh_number = this.refresh_number + 1;\r\n      \r\n      let getStr = (params:any) => {\r\n        return params[\"marker\"] + params[\"seriesName\"] + \"&nbsp;&nbsp;&nbsp;&nbsp;<strong>\"+ params[\"data\"].toFixed(3)+\"</strong>\";\r\n      }\r\n      if(enable_fairness_chart){\r\n          fairness_chart_option = {\r\n              title: {\r\n                //text: 'Fairness'\r\n              },\r\n              tooltip: {\r\n                trigger: 'axis',\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                formatter: function (params:any) {\r\n                  console.log(\"tooltip\", params);\r\n                  let return_str = params[0][\"name\"] + \"<br />\";\r\n                  for(let i = 0; i<params.length;i++){\r\n                    let param = params[i];\r\n                    return_str += getStr(param) + \"<br />\"\r\n                  }\r\n                  return return_str;\r\n                  //return params[\"marker\"] + params[\"name\"] + \"&nbsp;&nbsp;&nbsp;&nbsp;<strong>\"+ params[\"data\"].toFixed(3)+\"</strong>\";\r\n                }\r\n              },\r\n              legend: {\r\n                \"right\": 20\r\n              },\r\n              grid: {\r\n                left: '3%',\r\n                right: '4%',\r\n                bottom: '3%',\r\n                containLabel: true\r\n              },\r\n              yAxis: {\r\n                type: 'value',\r\n                boundaryGap: [0, 0.01]\r\n              },\r\n              xAxis: {\r\n                type: 'category',\r\n                data: fairness_package_dict[\"x_axis_data\"]\r\n              },\r\n              series: fairness_package_dict[\"y_series_data\"]\r\n            };\r\n          \r\n          \r\n          return <ReactECharts key={this.refresh_number} option={fairness_chart_option} />\r\n      }else{\r\n          return <div />\r\n      }\r\n  }\r\n    \r\n\r\n    public render() {\r\n\r\n        return this.renderFairnessChart(this.props.fairness_package);\r\n    }\r\n}","\r\nimport './ParallelSets.css'\r\nimport * as React from \"react\";\r\nimport { assert_key_hier } from '../../../helper';\r\nconst d3 = require(\"d3\");\r\nconst d3_parsets = require(\"./d3.parsets.js\");\r\nexport interface IProps {\r\n    PSJson:any,\r\n    PSDimensions:any,\r\n    ReversedDimMapping:any,\r\n    changeFilters:any,\r\n    width: number,\r\n    height:number,\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ParallelCoordinates extends React.Component<IProps, IState>{\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onRibbonClick = this.onRibbonClick.bind(this);\r\n        this.clearFilter = this.clearFilter.bind(this);\r\n        this.onCategoryClick = this.onCategoryClick.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    // Component Configurable Methods.\r\n    componentDidMount(){\r\n        this.renderD3();\r\n    }\r\n    // Mount\r\n    componentWillMount() {\r\n        //console.log('Component will mount!')\r\n     }\r\n\r\n     \r\n    // Update\r\n     shouldComponentUpdate(nextProps:IProps, nextState:IState){\r\n        return true;\r\n    }\r\n     componentWillUpdate(nextProps:IProps, nextState:IState) {\r\n        //console.log('Component will update!');\r\n     }\r\n\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        if(prevProps.PSJson.name !== this.props.PSJson.name || \r\n            !this.comparePSDimensions(prevProps.PSDimensions, this.props.PSDimensions) ||\r\n            prevProps.width !== this.props.width ||\r\n            prevProps.height !== this.props.height ){\r\n            d3.selectAll(\"#ParallelSets_SVG\").remove();\r\n            this.props.changeFilters({});\r\n            this.renderD3();\r\n        }\r\n\r\n        \r\n     }\r\n     public comparePSDimensions(prev:any, current:any){\r\n         if(prev.length !== current.length){\r\n             return 0; // Not equal\r\n         }else{\r\n             let flag = 1;\r\n            for(let i = 0; i<prev.length; i++){\r\n                if(prev[i] !== current[i]){\r\n                    flag = 0;\r\n                    break;\r\n                }\r\n            }   \r\n            return flag;\r\n         }\r\n     }\r\n     public onRibbonClick(e:any, ReversedDimMapping:any){\r\n        const filters:any = {};\r\n        let current = e.data;\r\n        while(current){\r\n            if(current.hasOwnProperty(\"parent\")){\r\n                filters[ReversedDimMapping[current.dimension]] = [current.name];\r\n                current = current.parent;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n        //filters[feature] = selected;            \r\n        this.props.changeFilters(filters);\r\n    }\r\n    public onCategoryClick(e:any, ReversedDimMapping:any){\r\n        console.log(\"onCategoryClick\", e);\r\n        const filters:any = {};\r\n        let current = e.data;\r\n        filters[ReversedDimMapping[current.dimension.name]] = [current.name];\r\n        this.props.changeFilters(filters);\r\n    }\r\n    public clearFilter(){\r\n        console.log(\"clearFilter\");\r\n        this.props.changeFilters({});\r\n    }\r\n    public renderD3(){\r\n        // PSJson {\"PSData\":[{specific dimension}], \"name\"}\r\n        \r\n        let {width, height, PSJson, PSDimensions, ReversedDimMapping} = this.props;\r\n        \r\n        // Parallel Sets\r\n        \r\n        let PSData = PSJson.PSData;\r\n        let chart_dimensions = PSDimensions;\r\n\r\n        //let chart_dimensions = [\"Survived\", \"Sex\", \"Age\", \"Class\"];\r\n        if(chart_dimensions.length <= 1){\r\n            console.log(\"The number of dimensions must be larger or equal to 2.\")\r\n            return ;\r\n        }\r\n        // tension = 1 --> line\r\n        // tension = 0.5 --> curve\r\n        var chart = d3.parsets()\r\n            .dimensions(chart_dimensions)\r\n            .width(width)\r\n            .height(height)\r\n            .tension(1)\r\n            .on(\"ribbonClick\",(e:any)=>{this.onRibbonClick(e,ReversedDimMapping)})\r\n            .on(\"sortDimensions\",this.clearFilter)\r\n            .on(\"sortCategories\",this.clearFilter)\r\n            .on(\"categoryClick\", (e:any)=>{this.onCategoryClick(e,ReversedDimMapping)})\r\n            \r\n        var vis = d3.select(\"#parallelSets\").append(\"svg\")\r\n            .attr(\"id\",\"ParallelSets_SVG\")\r\n            .attr(\"width\", chart.width())\r\n            .attr(\"height\", chart.height());\r\n\r\n        let csv = PSData;\r\n        vis.datum(csv).call(chart);\r\n\r\n    }\r\n    public render() {\r\n        return (\r\n            <div id=\"parallelSets\" />\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","\r\nimport * as React from \"react\";\r\nimport {Row, Pagination, Col } from 'antd';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { assert_key } from \"../../../helper\";\r\nimport {getRawDataURL} from '../../../service/dataService';\r\nimport { start } from \"repl\";\r\nexport interface IProps {\r\n  rawdata_list: any,\r\n  image_width: any,\r\n  image_height: any,\r\n  row_image_num: any,\r\n  task_name:any\r\n}\r\nexport interface IState {\r\n  current_page: number,\r\n}\r\n\r\nexport default class ImageDisplay extends React.Component<IProps, IState>{\r\n    public refresh_number: any = 1;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.renderImageDisplay = this.renderImageDisplay.bind(this);\r\n        this.state = {\r\n          current_page: 1,\r\n        }\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    public onPageChange(page_num:any){\r\n      this.setState({\r\n        current_page: page_num\r\n      })\r\n    }\r\n    public renderImageDisplay = () => {\r\n      // rawdata_list: [\"src\", \"alt\", \"width\", \"height\", \"text_list\", \"col_size\"]\r\n      let {image_width, image_height, row_image_num} = this.props;\r\n      let old_rawdata_list = this.props.rawdata_list;\r\n      let col_size = Math.floor(24 / row_image_num);\r\n      let rawdata_list:any = [];\r\n      for(let i = 0; i<old_rawdata_list.length; i++){\r\n        let pkg = {\r\n          ...old_rawdata_list[i],\r\n          \"width\": image_width,\r\n          \"height\": image_height,\r\n          \"col_size\": col_size\r\n        }\r\n        rawdata_list.push(pkg);\r\n      }\r\n      console.log(\"new rawdata list\", rawdata_list)\r\n      /** \r\n      let rawdata_list:any = [];\r\n      let image_config = {\r\n        \"src\": getRawDataURL(),\r\n        \"alt\": \"Girl in a jacket\",\r\n        \"width\": image_width,\r\n        \"height\": image_height,\r\n        \"text_list\": [\"Ground Truth: Bird\", \"Confidence: 0.9\"],\r\n        \"col_size\": col_size,\r\n    }\r\n      for(let i = 0 ; i< 100; i++){\r\n        let clone = JSON.parse(JSON.stringify(image_config));\r\n        clone[\"text_list\"].push(i);\r\n           rawdata_list.push(clone);\r\n      }\r\n      */\r\n      let total_item_num = rawdata_list.length;\r\n      let total_page = Math.ceil(total_item_num / row_image_num);\r\n      let current_page = this.state.current_page;\r\n      if(total_page == 0){\r\n        return <div />\r\n      }\r\n      if(this.state.current_page > total_page){\r\n        this.setState({\r\n          current_page: total_page\r\n        })\r\n        current_page = total_page;\r\n      }\r\n      if(this.state.current_page < 1){\r\n        this.setState({\r\n          current_page: 1\r\n        })\r\n        current_page = 1;\r\n      }\r\n    console.log(\"total page\", total_page, \"current page\", current_page);\r\n    let generate_file_contents = (config:any) => {\r\n      if(this.props.task_name == \"Image Tagging\"){\r\n        return <img src={config[\"src\"]} alt={config[\"alt\"]} \r\n        width={config[\"width\"]} height={config[\"height\"]} />\r\n\r\n      }else{\r\n        return <audio controls style={{\"display\": \"block\", \r\n                                      \"transform\": \"scale(0.9, 1)\", \"transformOrigin\": \"left\"}}>\r\n          <source src={config[\"src\"]} type=\"audio/wav\"></source>\r\n          Not supported!\r\n        </audio>\r\n      }\r\n    }\r\n    let generate_image_col = (config:any) => {\r\n        let flag1 = assert_key(config, [\"src\", \"alt\", \"width\", \"height\", \"text_list\", \"col_size\"]);\r\n        if(flag1){\r\n           \r\n            return <Col span={config[\"col_size\"]} key={config[\"alt\"]}>\r\n                <Row>\r\n                  {generate_file_contents(config)}\r\n                \r\n                </Row>\r\n                {config[\"text_list\"].map((d:any)=>{\r\n                  return <Row>\r\n                    {d}\r\n                  </Row>\r\n                }\r\n                )}\r\n            </Col>\r\n        }else{\r\n            return <div />\r\n        }\r\n    }\r\n    let generate_image_rows = (current_page: number, num_per_page: number, rawdata_list:any) => {\r\n      let start_point = (current_page - 1) * num_per_page;\r\n      if(start_point < 0){\r\n        start_point = 0;\r\n      }\r\n      let end_point = start_point + num_per_page;\r\n      if(end_point >= rawdata_list.length){\r\n        end_point = rawdata_list.length;\r\n      }\r\n      if(end_point < start_point){\r\n        end_point = start_point;\r\n      }\r\n\r\n      let sliced_data = rawdata_list.slice(start_point, end_point);\r\n      if(sliced_data.length == 0){\r\n        return <div />\r\n      }else{\r\n        return sliced_data.map((d:any)=>{\r\n          return generate_image_col(d);\r\n        })\r\n      }\r\n\r\n    }\r\n    return <Col span={24}>\r\n          <Row>\r\n          {generate_image_rows(current_page, row_image_num, rawdata_list)}\r\n          </Row>\r\n          <br />\r\n          <Row  justify=\"center\" align=\"middle\" >\r\n          <Col>\r\n\r\n          \r\n          <Pagination current={current_page} \r\n            total={total_page} \r\n            pageSize={1}\r\n            onChange={this.onPageChange}\r\n            />\r\n            </Col>\r\n          </Row>\r\n          \r\n    </Col>\r\n  }\r\n    \r\n\r\n    public render() {\r\n\r\n        return this.renderImageDisplay();\r\n    }\r\n}","\r\nimport * as React from \"react\";\r\nimport { Collapse, Row, Button,  Tag, Tabs, \r\n    InputNumber, Typography, Col, Table, Select, Pagination, Divider } from 'antd';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { extract_dataset_list, extract_api_list, \r\n    extract_task_list, extract_explore_dataset_list,\r\n    extract_fairness_from_data, extract_value_from_data,\r\n    convert_package_to_graph,\r\n    extract_ps_data_from_package,\r\n    extract_rawdata_for_imagedisplay} from \"../../../helper/preprocessor\";\r\nimport AccuracyD3Chart from \"./AccuracyD3Chart\";\r\nimport AccuracyChart from \"./AccuracyChart\";\r\nimport ConsistencyChart from \"./ConsistencyChart\";\r\nimport ConfidenceChart from \"./ConfidenceChart\";\r\nimport FairnessChart from \"./FairnessChart\";\r\nimport { assert } from \"console\";\r\nimport { assert_key, getLineColor, skew_weight, \r\n    safe_extract_item_from_list, safe_extract_items_from_list,\r\n     get_mode_options, \r\n     assert_key_hier,\r\n     getDecimal} from \"../../../helper\";\r\nimport PCPChart from \"./PCPChart\";\r\nimport { off } from \"process\";\r\nimport ParallelCoordinates from \"./ParallelSets\";\r\nimport ImageDisplay from \"./ImageDisplay\";\r\n\r\n\r\n    \r\n// render echarts option.\r\nconst d3 = require(\"d3\");\r\nconsole.log(\"d3:\", d3.version)\r\nexport interface IProps {\r\n    api_id: number | null, // dummy\r\n    api_id_list:any, \r\n    dataset_id: number | null,\r\n    task_id: number | null,\r\n    mode_id: number,\r\n    data:any,\r\n    explore_meta_data: any,\r\n    width: any,\r\n    height: any\r\n}\r\nexport interface IState {\r\n    filters: any,\r\n}\r\n\r\nexport default class InfoView extends React.Component<IProps, IState>{\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.renderInfoContent = this.renderInfoContent.bind(this);\r\n        this.changeFilters = this.changeFilters.bind(this);\r\n        this.state = {\r\n            filters: {}\r\n        }\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    public changeFilters(filters: any){\r\n        this.setState({\r\n            filters: filters\r\n        })\r\n    }\r\n    public renderInfoContent(){\r\n        let {dataset_id, api_id, data, task_id, api_id_list, mode_id} = this.props;\r\n        \r\n        // If selected dataset and api, then it can be displayed, \r\n        // otherwise it cannot be displayed.\r\n        \r\n        // 1. Extract selected dataset name and selected api name\r\n        let task_list = extract_task_list(data);\r\n        let dataset_list = extract_dataset_list(data, task_id);\r\n        let api_list = extract_api_list(data, task_id);\r\n        let mode_list = get_mode_options();\r\n        \r\n        let selected_task_name = safe_extract_item_from_list(task_id, task_list);\r\n        let selected_dataset_name = safe_extract_item_from_list(dataset_id, dataset_list);\r\n        let selected_api_name_list = safe_extract_items_from_list(api_id_list, api_list);\r\n        let selected_mode_name = safe_extract_item_from_list(mode_id, mode_list);\r\n\r\n        \r\n        \r\n        function generateFairnessChart(fairness_pkg:any, col_size:any){\r\n            return <Col span={col_size}><FairnessChart fairness_package={fairness_pkg}/></Col>\r\n        }\r\n        function generatePureFairnessChart(fairness_pkg:any){\r\n            return <Row>\r\n                <Col span={24}>\r\n                <Divider>Fairness</Divider>\r\n                    <FairnessChart fairness_package={fairness_pkg}/>\r\n                    </Col>\r\n                    </Row>\r\n        }\r\n        let generateMetricsVisualization = () => {\r\n            let subdata = {};\r\n            let decimal = getDecimal();\r\n            if(Object.keys(data).indexOf(selected_task_name)>=0){\r\n                subdata = data[selected_task_name];\r\n            }\r\n            if(selected_api_name_list.length > 1){\r\n                let acc_package_dict:any = {};\r\n                for(let i = 0; i<selected_api_name_list.length; i++){\r\n                    let selected_api_name = selected_api_name_list[i];\r\n                    let acc_package = extract_value_from_data(subdata, \"AccuracyTable\", selected_dataset_name, selected_api_name);\r\n                    acc_package_dict[selected_api_name] = acc_package;\r\n                }\r\n                return <div>\r\n                {/*API: {selected_api_name} and Dataset: {selected_dataset_name}*/}\r\n                <div style={{\"width\":\"100%\", \"height\":\"100%\"}}>\r\n                    <Row>\r\n                        <Col span={24}>\r\n                        {/*<AccuracyD3Chart acc_package={acc_package}\r\n                        name={\"Accuracy\"}\r\n                        width={this.props.width / 3}\r\n        height={\"400\"}/>*/}\r\n                        <Divider>Accuracy</Divider>\r\n                        <AccuracyChart acc_package={acc_package_dict} />\r\n\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            }else if(selected_api_name_list.length === 1){\r\n                let selected_api_name = selected_api_name_list[0];\r\n                \r\n                let acc_package = extract_value_from_data(subdata, \"AccuracyTable\", selected_dataset_name, selected_api_name);\r\n                let acc_package_dict:any = {};\r\n                acc_package_dict[selected_api_name] = acc_package;\r\n                let consistency_raw_package = extract_value_from_data(subdata, \"ConsistencyTable\", selected_dataset_name, selected_api_name);\r\n                let confidence_raw_package = extract_value_from_data(subdata, \"ConfidenceTable\", selected_dataset_name, selected_api_name);\r\n                let consis_graph_pkg = convert_package_to_graph(consistency_raw_package);\r\n                let conf_graph_pkg = convert_package_to_graph(confidence_raw_package);\r\n                let col_size = 8;\r\n                let fairness_pkg = extract_fairness_from_data(subdata, \"FairnessTable\", selected_dataset_name, selected_api_name);\r\n                console.log(\"fairness_pkg\", fairness_pkg)\r\n                let enable_fairness = Object.keys(fairness_pkg).length>0;\r\n                if(enable_fairness){\r\n                    col_size = 6;\r\n                }\r\n\r\n                \r\n                let generate_horizontal_layout = () => {\r\n                    return <Row>\r\n                        <Col span={col_size}>\r\n                        {/*<AccuracyD3Chart acc_package={acc_package}\r\n                        name={\"Accuracy\"}\r\n                        width={this.props.width / 3}\r\n        height={\"400\"}/>*/}\r\n                        <AccuracyChart acc_package={acc_package_dict} />\r\n\r\n                        </Col>\r\n                        <Col span={col_size}>\r\n                        <ConsistencyChart consistency_package={consis_graph_pkg}/>\r\n\r\n                        </Col>\r\n                        <Col span={col_size}>\r\n                        <ConfidenceChart confidence_package={conf_graph_pkg}/>\r\n\r\n                        </Col>\r\n                        {(enable_fairness)?(generateFairnessChart(fairness_pkg, col_size)):<div/>}\r\n                    </Row>\r\n                }\r\n                let generate_veritical_layout = () => {\r\n                    return <Row>\r\n                        <Col span={24}>\r\n\r\n                        \r\n                    <Row>\r\n                    {/*<AccuracyD3Chart acc_package={acc_package}\r\n                    name={\"Accuracy\"}\r\n                    width={this.props.width / 3}\r\n    height={\"400\"}/>*/}\r\n                    <Col span={24}>\r\n                    <Divider>Accuracy</Divider>\r\n                    <AccuracyChart acc_package={acc_package_dict} />\r\n                    </Col>\r\n                    </Row>\r\n                    <Row>\r\n                    <Col span={24}>\r\n                    <Divider>Consistency</Divider>\r\n                    <ConsistencyChart consistency_package={consis_graph_pkg}/>\r\n                    </Col>\r\n                    </Row>\r\n                    <Row>\r\n                    <Col span={24}>\r\n                    <Divider>Confidence</Divider>\r\n                    <ConfidenceChart confidence_package={conf_graph_pkg}/>\r\n                    </Col>\r\n                    </Row>\r\n                    {(enable_fairness)?(generatePureFairnessChart(fairness_pkg)):<div/>}\r\n                    </Col>\r\n                </Row>\r\n                }\r\n                let generate_layout = (width:any)=>{\r\n                    return generate_veritical_layout();\r\n                    /*if(width >= 1000){\r\n                        return generate_horizontal_layout();\r\n                    }else{\r\n                        return generate_veritical_layout();\r\n                    }*/\r\n                }\r\n                return <div>\r\n                    {/*API: {selected_api_name} and Dataset: {selected_dataset_name}*/}\r\n                    <div style={{\"width\":\"100%\", \"height\":\"100%\"}}>\r\n                        \r\n                    {generate_layout(this.props.width)}\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n        }\r\n        let generateExploreVisualization = () => {\r\n            if(selected_api_name_list.length === 1){\r\n                \r\n                let selected_api_name = selected_api_name_list[0];\r\n                let ps_package = extract_ps_data_from_package(this.props.explore_meta_data, \r\n                    selected_dataset_name,\r\n                     selected_api_name,\r\n                     selected_task_name);\r\n                let ps_package_spec = [{\r\n                    \"n\":\"PSJson\",\r\n                    \"c\":[{\r\n                        \"n\":\"PSData\"\r\n                    },{\r\n                        \"n\":\"name\"\r\n                    }]\r\n                },{\r\n                    \"n\":\"PSDimensions\"\r\n                },{\r\n                    \"n\":\"ReversedDimMapping\"\r\n                }]\r\n                let flag = assert_key_hier(ps_package, ps_package_spec);\r\n                if(!flag){\r\n                    return <div>Data unavailable.</div>\r\n                    // return <div />;\r\n                }\r\n                let PSJson = ps_package[\"PSJson\"];\r\n                let PSDimensions = ps_package[\"PSDimensions\"];\r\n                let ReversedDimMapping = ps_package[\"ReversedDimMapping\"];\r\n                let row_image_num = 4;\r\n                let image_width = 200;\r\n                let image_height = 200;\r\n                let image_container_width = this.props.width - 40;\r\n                row_image_num = Math.min(Math.floor(image_container_width / (image_width)), row_image_num);\r\n                row_image_num = Math.max(row_image_num, 1);\r\n                image_width = Math.min(image_container_width / row_image_num - 10, image_width);\r\n                image_width = Math.max(image_width, 10);\r\n                image_height = image_width;\r\n\r\n                let parallel_sets_height = 400;\r\n                parallel_sets_height = Math.min(this.props.height - 40, parallel_sets_height);\r\n                parallel_sets_height = Math.max(parallel_sets_height, 40);\r\n                let parallel_sets_width = this.props.width - 60;\r\n                parallel_sets_width = Math.max(parallel_sets_width, 40);\r\n\r\n                let rawdata_list = extract_rawdata_for_imagedisplay(ps_package, selected_dataset_name, this.state.filters);\r\n\r\n\r\n                return <div style={{\"width\":\"100%\", \"height\":\"100%\"}}>\r\n                    <Row>\r\n                        <Col span={24}>\r\n                        <Divider>Confidence Parallel Sets</Divider>\r\n                            <ParallelCoordinates \r\n                                PSJson={PSJson}\r\n                                PSDimensions={PSDimensions}\r\n                                ReversedDimMapping={ReversedDimMapping}\r\n                                width={parallel_sets_width}\r\n                                height={parallel_sets_height}\r\n                                changeFilters={this.changeFilters}\r\n                                >\r\n                                \r\n                            </ParallelCoordinates>\r\n                            <Divider>Instances</Divider>\r\n                            <ImageDisplay rawdata_list={rawdata_list} image_width={image_width}\r\n                                        image_height={image_height} row_image_num={row_image_num}\r\n                                        task_name={selected_task_name}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </div>\r\n\r\n                /*\r\n                let pcp_package = extract_pcp_data_from_package(this.props.explore_meta_data, selected_dataset_name, selected_api_name);\r\n                return <div style={{\"width\":\"100%\", \"height\":\"100%\"}}>\r\n                    <Row>\r\n                        <Col span={8}>\r\n                            <PCPChart pcp_package={pcp_package}></PCPChart>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </div>\r\n                */\r\n            }else{\r\n                return <div>Please select one API.</div>\r\n            }\r\n            \r\n        }\r\n        if(selected_api_name_list && selected_dataset_name && selected_task_name){\r\n            if(selected_mode_name == \"Metrics\"){\r\n                return generateMetricsVisualization();\r\n            }else if(selected_mode_name == \"Explore\"){\r\n                return generateExploreVisualization();\r\n            }\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n        return <div />\r\n    }\r\n\r\n    public render() {\r\n        console.log(\"InfoView Props:\", this.props);\r\n        let {dataset_id, api_id, data, mode_id} = this.props;\r\n        let viewtitle = \"Statistics\";\r\n        if(mode_id === 2){\r\n            viewtitle = \"Explore\";\r\n        }\r\n        //height:\"\"+(this.props.height - 40)+\"px\",\r\n        return (            \r\n            <div>\r\n                <div className=\"ViewTitle2\">{viewtitle}</div>\r\n                \r\n                <div className=\"ViewBox\">\r\n                    <div style={{width: \"100%\",   overflowY: \"hidden\"}}>\r\n                        {this.renderInfoContent()}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import InfoView from './InfoView'\r\nexport default InfoView;\r\n\r\n\r\n","import InfoView from '../components/DataRuns/InfoView'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { StoreState } from '../types';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    data: state.data,\r\n    api_id: state.api_id, // dummy\r\n    api_id_list: state.api_id_list, \r\n    dataset_id: state.dataset_id,\r\n    task_id: state.task_id,\r\n    mode_id: state.mode_id,\r\n    explore_meta_data: state.explore_meta_data\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoView);\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport {Row} from 'antd';\r\nimport DataSelectorContainer from '../../../container/DataSelectorContainer';\r\nimport { ENABLE_FORCE_AUTH } from '../../../service/dataService';\r\nimport { Divider, Typography, Tag } from 'antd';\r\nconst { Title, Paragraph, Text, Link } = Typography;\r\nexport interface DescriptionViewProps {\r\n    mode_id: number,\r\n}\r\n\r\nexport interface DescriptionViewState {}\r\n\r\nexport default class DescriptionView extends React.Component<DescriptionViewProps, DescriptionViewState> {\r\n    constructor(props: DescriptionViewProps) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        };\r\n    }\r\n    public render() {\r\n        let generateHighlight = (text:any) => {\r\n            return <span style={{\"color\":\"purple\"}}><strong>{text}</strong></span>\r\n        }\r\n        let generateMetricsDescription = () => {\r\n            return <div> \r\n                \r\n\r\n            <Title level={3}>Summary statistics of data</Title>\r\n                <Paragraph>\r\n                <strong>Accuracy:</strong> The API accuracy varies across different years. In the accuracy chart, the x-axis encodes the year, and the y-axis encodes {generateHighlight(\"the API accuracy for this year.\")} The color indicates different APIs. You can select multiple APIs to check the different APIs' performance in different years. \r\n                </Paragraph>\r\n                <Paragraph>\r\n                <strong>Consistency:</strong> The API prediction results may vary across different years. In the consistency chart, each node represents one year of the prediction results of the API. The value on the edge between the nodes indicates {generateHighlight(\"the percentage of predictions remaining the same in those two years.\")} The color of the edge indicates the consistency value, and the legend is shown at the bottom left of the chart. You can only select one API to check this chart.\r\n                </Paragraph>\r\n                <Paragraph>\r\n                <strong>Confidence:</strong> The API confidence will also change across different years, even if the API in different years has the same prediction results. In the confidence chart, each node represents one year of the prediction results of the API. The value on the edge between the nodes indicates {generateHighlight(\"the average absolute confidence changes among all predictions in those two years.\")} The color of the edge indicates the confidence change value, and the legend is shown at the bottom left of the chart. You can only select one API to check this chart.\r\n                </Paragraph>\r\n                <Paragraph>\r\n                <strong>Fairness:</strong> The API may have different performances on the different subgroups of data (e.g., male and female). For such sensitive attributes, it is not desired that the API has different performance on them. In the fairness chart, the x-axis represents the sensitive attribute, and the y-axis represents {generateHighlight(\"the API accuracy on the subgroup specified by the attribute.\")} The color of the bar indicates the year. You can select dataset COCO and only one API to check this chart.\r\n                </Paragraph>\r\n            </div>\r\n\r\n            \r\n        }\r\n        let generateExploreDescription = () => {\r\n            return <div> \r\n            \r\n                <Title level={3}>Explore data</Title>\r\n                <Paragraph>\r\n                <strong>Confidence Parallel Sets:</strong> Different instances will have different confidences for one API in different years. This chart uses each dimension to represent the individual year. Here, we consider a random subset of instances in the dataset to explore how confidence changes among those instances. In each dimension, there are several segments that represent different ranges of confidence. The length of the segment represents the percentage of instances in that range. The width of the ribbon plot between those dimensions represents the number of instances simultaneously satisfying the conditions in those years. {generateHighlight(\"You can click one segment or one ribbon plot to check the corresponding instances.\")} Please select only one API to enable exploration.\r\n                </Paragraph>\r\n            </div>\r\n\r\n            \r\n        }\r\n        if(this.props.mode_id === 1){\r\n            return generateMetricsDescription();\r\n        }else{\r\n            return generateExploreDescription();\r\n        }\r\n    }\r\n}\r\n","import DescriptionView from './DescriptionView'\r\nexport default DescriptionView;\r\n\r\n\r\n","import DescriptionView from '../components/DataRuns/DescriptionView'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { StoreState } from '../types';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    mode_id: state.mode_id,\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DescriptionView);\r\n\r\n\r\n\r\n","import DataRuns from './DataRuns'\r\nexport default DataRuns;\r\n\r\n\r\n","\r\nimport './DataRuns.css'\r\nimport * as React from \"react\";\r\nimport ControlPanelContainer from '../../container/ControlPanelContainer';\r\n//import { getGraphInfo } from '../../service/dataService';\r\nimport GridLayout from \"react-grid-layout\";\r\nimport InfoViewContainer from '../../container/InfoViewContainer';\r\nimport DescriptionViewContainer from '../../container/DescriptionViewContainer'\r\nimport { assert_key,getLayoutConfig, SystemDesign } from '../../helper';\r\nimport { Divider, Typography } from 'antd';\r\nconst { Title, Paragraph, Text, Link } = Typography;\r\n\r\n\r\n\r\nexport interface IProps {\r\n    dataset_id : number | null,\r\n    contentWidth:number,\r\n    contentHeight:number,\r\n}\r\nexport interface IState {\r\n    layout_config: any,\r\n    screenWidth: number,\r\n    screenHeight: number,\r\n    enableStatic: boolean\r\n}\r\n\r\nexport default class DataRuns extends React.Component<IProps, IState>{\r\n    public InfoViewRef:any;\r\n    public ControlPanelRef: any;\r\n    public DescriptionRef: any;\r\n    public viewname_to_ref:any;\r\n\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onResizeStop = this.onResizeStop.bind(this);\r\n        this.getLayoutConfigWithName = this.getLayoutConfigWithName.bind(this);\r\n        this.getCurrentLayoutConfig = this.getCurrentLayoutConfig.bind(this);\r\n        this.getViewRefWithName = this.getViewRefWithName.bind(this);\r\n        this.InfoViewRef = React.createRef();\r\n        this.ControlPanelRef = React.createRef();\r\n        this.viewname_to_ref = {\r\n            \"Description\": this.DescriptionRef,\r\n            \"ControlPanel\": this.ControlPanelRef,\r\n            \"InfoView\": this.InfoViewRef,\r\n        }\r\n\r\n        this.state = {\r\n            layout_config: null,\r\n            screenWidth : 0,\r\n            screenHeight: 0,\r\n            enableStatic: true\r\n        }\r\n\r\n\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n\r\n\r\n     // When the view is mounted, it will be executed.\r\n     componentDidMount(){\r\n        //window.addEventListener('resize', this.onResize)\r\n         this.setState({\r\n             layout_config: this.getWholeLayoutConfig(),\r\n             screenHeight: window.innerHeight,\r\n             screenWidth: window.innerWidth\r\n         })\r\n     }\r\n\r\n     public getViewRefWithName(name:string){\r\n         if(Object.keys(this.viewname_to_ref).indexOf(name) >= 0){\r\n            return this.viewname_to_ref[name];\r\n         }\r\n     }\r\n     // Get width and height from view name. \r\n     public getLayoutConfigWithName(name:string){\r\n         let width = 0;\r\n         let height = 0;\r\n         let viewref = this.getViewRefWithName(name)\r\n         if(viewref){\r\n            width = viewref.current.offsetWidth;\r\n            height = viewref.current.offsetHeight;\r\n         }\r\n         return {\r\n             \"width\":width,\r\n             \"height\":height\r\n         }\r\n     }\r\n     // Get the whole layout config. \r\n     public getWholeLayoutConfig(){\r\n        let viewName = Object.keys(this.viewname_to_ref); \r\n        let layout_config:any = {};\r\n        viewName.forEach((d:any)=>{\r\n            layout_config[d] = this.getLayoutConfigWithName(d);\r\n        })\r\n        return layout_config;\r\n     }\r\n\r\n     // Get layout config from view name. \r\n     public getCurrentLayoutConfig(name:string){\r\n         let layout_config = this.state.layout_config;\r\n        if(layout_config){\r\n            if(layout_config[name]){\r\n                return layout_config[name];\r\n            }else{\r\n                return null;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n     }\r\n\r\n     // Handling the changing of states or props.\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        // If the dataset_id has been changed. \r\n        if(prevProps.dataset_id !== this.props.dataset_id){\r\n            // If the id is valid. \r\n            if( this.props.dataset_id  && this.props.dataset_id>=0){\r\n                // Set to a dummy case.\r\n                this.setState({\r\n\r\n                })\r\n            }else{\r\n                // Set to a dummy case.\r\n                this.setState({\r\n\r\n                })\r\n            }\r\n        }\r\n\r\n        // If the window is resized, update the layout config. \r\n        if(prevProps.contentHeight!==this.props.contentHeight\r\n            || prevProps.contentWidth !== this.props.contentWidth){\r\n                this.setState({\r\n                    layout_config: this.getWholeLayoutConfig()\r\n                })\r\n            }   \r\n        \r\n        \r\n        \r\n     }\r\n\r\n    // RESERVED: handling the layout change.\r\n    public onLayoutChange(layout:any){\r\n        console.log(\"Layout\", layout);\r\n    }\r\n    // For react-grid-layout, when the resizing is fixed, the layout configuration should be updated.\r\n    public onResizeStop(layout:any){\r\n        console.log(\"onResizeStop\", layout);\r\n        console.log(\"Layout\", this.getWholeLayoutConfig());\r\n        this.setState({\r\n            layout_config : this.getWholeLayoutConfig()\r\n        })\r\n        //var width = document.getElementById('a').offsetWidth;\r\n    }\r\n    public render() {\r\n        // Rendering. \r\n        let dataset_id = this.props.dataset_id;\r\n        let generateInfoView = (width:number, height:number) => {\r\n            return <InfoViewContainer \r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        let set_enable_static = (value:any) => {\r\n            this.setState({\r\n                enableStatic: value\r\n            })\r\n        }\r\n        let get_enable_static = () => {\r\n            return this.state.enableStatic\r\n        }\r\n        let enableAutoModify = true;\r\n        if(enableAutoModify){\r\n            document.addEventListener(\"keydown\", function(e:any){\r\n                //console.log(e)\r\n                let curr_enableStatic = get_enable_static();\r\n                switch(e.keyCode){\r\n                    case 9: // Tab -- Open the auto layout.\r\n                        if(curr_enableStatic == true){\r\n                            set_enable_static(false);    \r\n                            alert(\"You have enabled the modified layout. You can press alt to disable it.\");    \r\n                        }\r\n                        return;\r\n                    case 18:\r\n                        if(curr_enableStatic == false){\r\n\r\n                            set_enable_static(true);\r\n                            alert(\"You have disabled the modified layout. You can press tab to modify it.\")\r\n                        }\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        \r\n\r\n        // layout is an array of objects, see the demo for more complete usage\r\n        \r\n        let enableStatic = this.state.enableStatic;  // If enabled static, the layout cannot be manually configured.\r\n        if(!enableAutoModify){\r\n            enableStatic = true;\r\n        }\r\n        let max_row_num = Math.floor(this.props.contentHeight / 40); // Maximum rows in the screen.\r\n        // small width, height: 1707 724\r\n        // big width, height: 2560 1175\r\n        let ControlPanelH = 3;\r\n        let ControlPanelW = 24;\r\n        let SecondLineH = 10;\r\n        let DescriptionH = 10;\r\n\r\n        let layout = [\r\n            {i: 'c', x: 0, y: 0, w: ControlPanelW, h: DescriptionH, static:enableStatic}, // Description\r\n            {i: 'a', x: 0, y: DescriptionH, w: ControlPanelW, h: ControlPanelH, static:enableStatic},  // Control Panel\r\n            {i: 'b', x: 0, y: ControlPanelH + DescriptionH, w: ControlPanelW, h: SecondLineH, static:enableStatic}, // Info View\r\n        ];\r\n        \r\n        // Generate Whole Layout.\r\n        let generateSequentialLayout = () => {\r\n            let contentWidth = this.props.contentWidth;\r\n            return <div>\r\n                <div className=\"IntroViewBox\" key=\"c\" ref={this.DescriptionRef}>\r\n                    <DescriptionViewContainer />\r\n                </div>\r\n                <div className=\"IntroViewBox\" key=\"a\" ref={this.ControlPanelRef}>\r\n                <ControlPanelContainer \r\n                        width={contentWidth}\r\n                        height={100}/>\r\n                </div>\r\n                <div className=\"IntroViewBox\" key=\"b\" ref={this.InfoViewRef}>\r\n                {generateInfoView(\r\n                            contentWidth, \r\n                            350\r\n                        )}\r\n                </div>\r\n            </div>\r\n        }\r\n        let generateWholeView = () =>{\r\n            let screenwidth = window.innerWidth;\r\n            //let screenheight = window.innerHeight;\r\n\r\n            // cols = 24, rowHeight = 30\r\n            return <div><GridLayout className=\"layout\" layout={layout} \r\n                cols={24} rowHeight={31} width={this.props.contentWidth} onLayoutChange={this.onLayoutChange}\r\n                onResizeStop={this.onResizeStop}>\r\n                    <div className=\"PanelBox\" key=\"c\" ref={this.DescriptionRef}>\r\n                        {(this.getCurrentLayoutConfig(\"Description\"))?<div/>:<div />}\r\n                    </div>\r\n                    <div className=\"PanelBox\" key=\"a\" ref={this.ControlPanelRef}>\r\n                        {(this.getCurrentLayoutConfig(\"ControlPanel\"))?<ControlPanelContainer \r\n                        width={this.getCurrentLayoutConfig(\"ControlPanel\")[\"width\"]}\r\n                        height={this.getCurrentLayoutConfig(\"ControlPanel\")[\"height\"]}/>:<div />}\r\n                    </div>\r\n                    <div className=\"PanelBox\" key=\"b\" ref={this.InfoViewRef}>\r\n                        {(this.getCurrentLayoutConfig(\"InfoView\"))?generateInfoView(\r\n                            this.getCurrentLayoutConfig(\"InfoView\")[\"width\"], \r\n                            this.getCurrentLayoutConfig(\"InfoView\")[\"height\"]\r\n                        ):<div />}\r\n                    </div>\r\n\r\n                    \r\n                </GridLayout>\r\n                \r\n                </div>\r\n        }\r\n        \r\n        return generateSequentialLayout();\r\n    }\r\n}\r\n\r\n","import DataRuns from '../components/DataRuns'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    dataset_id : state.dataset_id,\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    \r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataRuns);\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport { Divider, Typography } from 'antd';\r\nimport Banner from \"../full_banner.png\";\r\nconst { Title, Paragraph, Text, Link } = Typography;\r\n\r\nexport interface IntroViewProps {\r\n    contentWidth: number,\r\n    contentHeight: number\r\n}\r\n\r\nexport interface IntroViewState {}\r\n\r\nexport default class IntroView extends React.Component<IntroViewProps, IntroViewState> {\r\n    constructor(props: IntroViewProps) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        };\r\n    }\r\n    public render() {\r\n        let {contentWidth} = this.props;\r\n        let breakpoint = 540;\r\n        let img_style1 = {\"height\": \"120px\"};\r\n        let img_style2 = {\"width\": \"100%\"};\r\n        let used_style:any = img_style1;\r\n        if(contentWidth > breakpoint){\r\n            used_style = img_style1;\r\n        }else{\r\n            used_style = img_style2;\r\n        }\r\n        return (\r\n\r\n            <div className=\"IntroViewBox\">\r\n                <Typography>\r\n                <div style={{\"textAlign\": \"center\"}}>\r\n                <img src={Banner} style={used_style} alt=\"banner\"/>\r\n                \r\n                </div>\r\n                {/*<Title level={3}>HAPI: A Large-scale Longitudinal Dataset of Commercial ML API Predictions</Title>*/}\r\n                <Paragraph>\r\n                Commercial ML APIs offered by providers such as Google, Amazon and Microsoft have dramatically simplified ML adoption in many applications. Numerous companies and academics pay to use ML APIs for tasks such as object detection, OCR and sentiment analysis. Different ML APIs tackling the same task can have very heterogeneous performance. Moreover, the ML models underlying the APIs also evolve over time. As ML APIs rapidly become a valuable marketplace and a widespread way to consume machine learning, it is critical to systematically study and compare different APIs with each other and to characterize how APIs change over time. However, this topic is currently underexplored due to the lack of data. Here, we present HAPI (History of APIs), a longitudinal dataset of 1,761,417 instances of commercial ML API applications (involving APIs from Amazon, Google, IBM, Microsoft and other providers) across diverse tasks including image tagging, speech recognition and text mining from 2020 to 2022. Each instance consists of a query input for an API (e.g., an image or text) along with the API’s output prediction/annotation and confidence scores. HAPI is the first large-scale dataset of ML API usages and is a unique resource for studying ML-as-a-service (MLaaS). As examples of the types of analyses that HAPI enables, we show that ML APIs’ performance change substantially over time—several APIs’ accuracies dropped on specific benchmark datasets. Even when the API’s aggregate performance stays steady, its error modes can shift across different subtypes of data between 2020 and 2022. Such changes can substantially impact the entire analytics pipelines that use some ML API as a component. We further use HAPI to study commercial APIs’ performance disparities across demographic subgroups over time. HAPI can stimulate more research in the growing field of MLaaS.\r\n                </Paragraph>\r\n\r\n            </Typography>\r\n                   \r\n            </div>\r\n            \r\n            \r\n        );\r\n    }\r\n}\r\n","import IntroView from './IntroView'\r\nexport default IntroView;\r\n\r\n\r\n","import { Col, Layout, Row, Menu } from 'antd';\r\nimport { MailOutlined, LineChartOutlined, \r\n  SearchOutlined, ProfileOutlined, \r\n  MenuFoldOutlined, DownloadOutlined, FileOutlined, CommentOutlined } from '@ant-design/icons';\r\n\r\nimport React from 'react';\r\nimport './App.css';\r\nimport DataRunsContainer from '../container/DataRunsContainer';\r\nimport IntroView from './IntroView';\r\nimport Banner from './trans_banner.png';\r\n// import DataView from \"./DataView\";\r\n//import SidePanel from '../components/SidePanel';\r\nconst { Content, Header, Sider } = Layout;\r\nexport interface IProps{\r\n  changeMode:any, \r\n  view_mode:number,\r\n  changeViewMode:any\r\n}\r\nexport interface IState {\r\n    contentWidth:number,\r\n    contentHeight:number,\r\n    screenWidth:number,\r\n    screenHeight:number,\r\n    menu_selected_keys:any,\r\n    \r\n}\r\nfunction download(file:any, text:any) {\r\n              \r\n  //creating an invisible element\r\n  var element = document.createElement('a');\r\n  element.setAttribute('href', text);\r\n  element.setAttribute('download', file);\r\n\r\n  // Above code is equivalent to\r\n  // <a href=\"path of file\" download=\"file name\">\r\n\r\n  document.body.appendChild(element);\r\n\r\n  //onClick property\r\n  element.click();\r\n\r\n  document.body.removeChild(element);\r\n}\r\nclass App extends React.Component<IProps, IState> {\r\n  public ContentRef:any;\r\n  constructor(props:IProps) {\r\n      super(props);\r\n      this.ContentRef = React.createRef();\r\n      this.onResize = this.onResize.bind(this);\r\n      this.onMenuSelect = this.onMenuSelect.bind(this);\r\n      this.state = {\r\n          contentWidth : 0,\r\n          contentHeight: 0,\r\n          screenHeight: 0,\r\n          screenWidth :0,\r\n          menu_selected_keys :['intro']\r\n      }\r\n\r\n  }\r\n  public getLayoutConfig(){\r\n    let enableDynamicLayout = true;\r\n    let contentWidth:number = 1500;\r\n    let contentHeight:number = 710;\r\n    if(enableDynamicLayout && this.ContentRef){\r\n      contentWidth = this.ContentRef.current.offsetWidth;\r\n      contentHeight = this.ContentRef.current.offsetHeight;\r\n    }\r\n    return {\r\n      contentWidth:contentWidth, \r\n      contentHeight:contentHeight\r\n    }\r\n  }\r\n  public onResize(){\r\n    this.updateLayoutState();\r\n }  \r\n public updateLayoutState(){\r\n    let contentLayout = this.getLayoutConfig();\r\n    let contentWidth = contentLayout.contentWidth;\r\n    let contentHeight = contentLayout.contentHeight;\r\n    //console.log(\"contentWidth, height\", contentWidth, contentHeight)\r\n   this.setState({\r\n      contentWidth:contentWidth,\r\n      contentHeight:contentHeight,\r\n       screenHeight: window.innerHeight,\r\n       screenWidth: window.innerWidth,\r\n       \r\n   })\r\n }\r\n componentDidMount(){\r\n    window.addEventListener('resize', this.onResize)\r\n    this.updateLayoutState();\r\n }\r\n componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n  // if(prevState.contentWidth!==this.state.contentWidth || )\r\n  //this.updateLayoutState();\r\n }\r\n  public onMenuSelect(event:any){\r\n    console.log(\"Menu change\", event.selectedKeys);\r\n    let selectedKeys = event.selectedKeys;\r\n    if(selectedKeys.length>=1){\r\n      let selectedKey = selectedKeys[0];\r\n      let blocked_keys = [\"docs\", \"contact\"];\r\n      if(selectedKey == \"download\"){\r\n        //window.location.href = \"http://github.com\"\r\n        download(\"hapi.tar.gz\", \"https://storage.googleapis.com/hapi-data/hapi.tar.gz\")\r\n        return ;\r\n      }\r\n      if(blocked_keys.indexOf(selectedKey) >= 0){\r\n        return ;\r\n      }\r\n    }\r\n    this.setState({\r\n      menu_selected_keys: event.selectedKeys\r\n    })\r\n    \r\n\r\n    if(selectedKeys.length>=1){\r\n      let selectedKey = selectedKeys[0];\r\n      if(selectedKey === \"intro\"){\r\n        this.props.changeViewMode(1);\r\n      }else if(selectedKey === \"metrics\"){\r\n        this.props.changeViewMode(2);\r\n        this.props.changeMode(1);\r\n      }else if(selectedKey === \"explore\"){\r\n        this.props.changeViewMode(3);\r\n        this.props.changeMode(2);\r\n      }\r\n    }\r\n  }\r\n  public render() {\r\n    let {screenWidth, screenHeight, contentWidth, contentHeight} = this.state;\r\n    console.log(\"contentWidth, height\", contentWidth, contentHeight)\r\n    \r\n      let view_generator = (view_mode:any, viewWidth:any) => {\r\n          if(view_mode === 1){\r\n              return <IntroView contentWidth={viewWidth} contentHeight={contentHeight}/>;\r\n          }else{\r\n              return <DataRunsContainer contentWidth={viewWidth} contentHeight={contentHeight}/>;\r\n          }\r\n\r\n      }\r\n      let generate_menu_items = () => {\r\n        {/*<Menu.Item key=\"docs\" icon={<FileOutlined />}>\r\n              Docs\r\n        </Menu.Item>,\r\n      <Menu.Item key=\"contact\" icon={<CommentOutlined />}>\r\n            Contact\r\n        </Menu.Item>*/}\r\n\r\n        let menu_items:any = [\r\n          <Menu.Item key=\"intro\" icon={<ProfileOutlined />}>\r\n            About\r\n          </Menu.Item>,\r\n          <Menu.Item key=\"metrics\" icon={<LineChartOutlined />}>\r\n            Examples Analysis\r\n          </Menu.Item>,\r\n          <Menu.Item key=\"explore\" icon={<SearchOutlined />}>\r\n            Explore\r\n          </Menu.Item>,\r\n           <Menu.Item key=\"download\" icon={<DownloadOutlined />}>\r\n            Download\r\n         </Menu.Item>\r\n        ];\r\n        return menu_items;\r\n      }\r\n      let generate_menu = (mode:any, className:any) => {\r\n        return <Menu key={\"menu_1\"} mode={mode} className={className} selectedKeys={this.state.menu_selected_keys} theme={\"dark\"} onSelect={this.onMenuSelect}>\r\n                  {generate_menu_items()}\r\n          </Menu> \r\n      }\r\n      let generate_menu_2 = (mode:any, className:any) => {\r\n        return <Menu key={\"menu_2\"} mode={mode} className={className} selectedKeys={this.state.menu_selected_keys} theme={\"dark\"} onSelect={this.onMenuSelect}>\r\n                  <Menu.SubMenu key=\"SubMenu\" title=\"\" icon={<MenuFoldOutlined />}>\r\n                  {generate_menu_items()}\r\n                  </Menu.SubMenu>\r\n                  \r\n          </Menu> \r\n      }\r\n      let generate_horizontal_menu = (enable:boolean, enableExpand:boolean=false) => {\r\n        if(enable){\r\n          if(enableExpand){\r\n            return generate_menu(\"horizontal\", \"\");\r\n          }else{\r\n            return generate_menu_2(\"horizontal\", \"\");\r\n          }\r\n           \r\n        }else{\r\n          return <div />\r\n        }\r\n      }\r\n      let generate_vertical_menu = (enable:boolean) => {\r\n        if(enable){\r\n          return generate_menu(\"vertical\", \"verticalmenu\");\r\n        }else{\r\n          return <div />\r\n        }\r\n      }\r\n      let breakpoint = 1100;\r\n      let enableVerticalMenu = false;\r\n      let enableHorizontalMenu = false;\r\n      let enableExpandHorizontalMenu = false;\r\n      let col_size_menu = 4;\r\n      let col_size_content = 20;\r\n      let viewWidth = contentWidth;\r\n      let menu_float: \"left\" | \"right\" = \"left\";\r\n      let menu_width = screenWidth - 137 - 50 - 100;\r\n      if(menu_width<50){\r\n        menu_width = 50;\r\n      }\r\n      if(screenWidth >= breakpoint){\r\n        enableVerticalMenu = false;\r\n        enableHorizontalMenu = true;\r\n        enableExpandHorizontalMenu = true;\r\n        col_size_menu = 0;\r\n        col_size_content = 24;\r\n        viewWidth = contentWidth;\r\n        menu_float = \"left\";\r\n      }else{\r\n        enableVerticalMenu = false;\r\n        enableHorizontalMenu = true;\r\n        enableExpandHorizontalMenu = false;\r\n        col_size_menu = 0;\r\n        col_size_content = 24;\r\n        viewWidth = contentWidth;\r\n        menu_float = \"right\";\r\n        menu_width = 100;\r\n      }\r\n\r\n    /*if(viewWidth < 700){\r\n      viewWidth = 700;\r\n    }*/\r\n\r\n    return (\r\n      <Layout className=\"app\" >\r\n         \r\n          <Header className='appHeader'>\r\n          {/*<div  style={{float:'left'}} className=\"appTitle\">HAPI </div>*/}\r\n          <div style={{float:'left'}} className=\"appTitle\">\r\n          <img src={Banner} style={{\"height\":\"25px\"}} alt=\"banner\"/>\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          \r\n          </div>\r\n          <div style={{\"float\":menu_float, \"width\":\"\"+menu_width+\"px\"}}>\r\n            {generate_horizontal_menu(enableHorizontalMenu, enableExpandHorizontalMenu)}\r\n          </div>\r\n          </Header>\r\n            <Content className='appContent' >\r\n              <div style={{ \"height\": \"100%\", \"width\":\"100%\"}} ref={this.ContentRef}>\r\n          \r\n              <Row style={{ \"height\": \"100%\", \"width\":\"100%\"}} >\r\n                <Col span={col_size_menu}>\r\n                  {generate_vertical_menu(enableVerticalMenu)}\r\n    </Col>\r\n                <Col span={col_size_content} style={{ \"height\": \"100%\", \"width\":\"100%\", \"overflow\":\"auto\"}}>\r\n                    {(contentWidth>0 && contentHeight >0)?view_generator(this.props.view_mode, viewWidth):<div />}\r\n                </Col>\r\n    </Row>\r\n                </div>\r\n                <div id=\"tooltip_proj\" />\r\n                <div id=\"tooltip_matrix\" />\r\n            </Content>\r\n          \r\n          \r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import DataSelector from '../components/App';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeMode, changeViewMode} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    mode_id: state.mode_id, \r\n    view_mode : state.view_mode\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeMode: (mode_id: number) => dispatch(changeMode(mode_id)),\r\n    changeViewMode: (view_mode:number) => dispatch(changeViewMode(view_mode))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataSelector);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducer'; \r\nimport \"./react_grid_layout_style.css\"\r\nimport \"./react_resizable_styles.css\"\r\nimport AppContainer from './container/AppContainer';\r\n// 1、创建 store\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(// 2、然后使用react-redux的Provider将props与容器连通起来\r\n    <Provider store={ store }>\r\n        <AppContainer />\r\n    </Provider> \r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}